[
  {
    "objectID": "tutorial_0.html#about-r",
    "href": "tutorial_0.html#about-r",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "About R",
    "text": "About R\nR is one of the most popular software tools for data analysis and data science. R can be used for “traditional” quantitative data analysis (e.g., regression analysis), but also much more: Quantitative text analysis, web scraping, interactive data visualization, Big Data analysis, and machine learning.\nR is what professional data analysts, data scientists, and researchers use in their work. It is used in academia, but also at government agencies, news channels (e.g., the BBC), and private companies (e.g., YouGov, Netflix, or Meta/Facebook). If you want to get an idea of who uses R and for what, you can check out the example job ads on Canvas (under “Why do I have to learn this?!”). Knowing how to work with R is a big advantage when you look for jobs — and this is one reason for why we want you to learn it.\nR is also a really good tool to have for your studies. The work for your BA and perhaps MA thesis will get considerably easier if you are able to quickly download and analyze a dataset — no hours of transcribing interviews or digging through dusty archives.\nLast but not least, R is open-source and free.\nWorking with R means writing computer code. You will not be able to run your analyses by clicking your way through menus or dragging and dropping things around, as you would do when working with Microsoft Word etc. Obviously, this may come as quite a change for you and may even feel strange.\nBut: R can be learned. Others have done it before, and there are many who start using R who have no prior experience with programming or computer languages. Still, it might take some time before you are really used to it.\nThink about learning R like learning a foreign language: The start is often very confusing, and things that are really simple feel really difficult. The trick to getting better is to just keep practicing and not giving up. If you do that, you will soon feel that you are making progress!",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#about-rstudio",
    "href": "tutorial_0.html#about-rstudio",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "About RStudio",
    "text": "About RStudio\nWorking with R has become quite a bit easier with the arrival of RStudio a while ago. Where R by itself gives you only a bland and empty computer code Console and an output window to work with, RStudio provides you with a more comfortable interface (or “integrated development environment”, IDE, to use the official term) that shows you which datasets and variables you are currently working with, gives you direct access to help files, and helps you with many other tasks (but you will still have to write code!). The basic version of RStudio is also open-source and free to use.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#what-you-see",
    "href": "tutorial_0.html#what-you-see",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "What you see",
    "text": "What you see\nLet’s quickly go over what you are seeing:\n\nThe large window on the left is the Console. This is where you can enter your commands and this is also where your results (other than graphs) will be shown (you can ignore the other tabs for now).\nThe smaller window in the upper right corner shows you your current working environment. It is currently empty but will later show you a list of all the variables, datasets, and other “objects” that are loaded at any given point. (You may also see that this window has other tabs labeled “History”, “Connections”, and “Tutorial”. You can also ignore these for now.)\nThe smaller window in the lower right corner is where any graphs (“Plots”) you create later will be shown, and this is also where the “Help” files appear if you request them. (You can also access and open “Files” on your computer, and see a list of add-on packages that you can install. These tabs are also not that important right now.)\n\nYou can customize how RStudio looks via the “Options” menu (yes, there is a regular click-based menu!). You can open the “Options” menu via the taskbar at the top (“Tools” -&gt; “Global Options…”). When the menu has popped up, navigate to “Appearance”. You can select a different theme and adjust other settings there.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#where-is-r",
    "href": "tutorial_0.html#where-is-r",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Where is R?",
    "text": "Where is R?\nYou may be wondering why you had to install R when you are now working in RStudio and not in R. Technically, you are already working with R. You can see that written in the output that appears in the Console window. It should read something like:\n\nR version 4.4.1 (2024-06-14) -- \"Race for Your Life\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin20\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\nWhen you run RStudio, R is running “under the hood”. You can think of RStudio as the instrument panel and steering wheel in a car, and R as the car’s engine.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#avoiding-chaos",
    "href": "tutorial_0.html#avoiding-chaos",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Avoiding chaos",
    "text": "Avoiding chaos\nThere is one important bit of housekeeping you need to do now to reduce chaos and confusion when working with R.\n\nOpen the main options menu in RStudio (click on “Tools” in the taskbar at the top, and then open the “Global Options” menu at the bottom of the list).\nUnder “Workspace” (shown right in the middle of the first page of the menu):\n\nUntick/deactivate “Restore .RData into workspace at startup”.\nIn the dropdown menu next to “Save workspace to .RData on exit”, select “Never”.\n\n\nYour settings should now look like those in the screenshot below.\n\n\n\nCorrect menu settings\n\n\nWhen you are done, click “OK” to close the menu.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#keeping-everything-organized-projects-and-working-directories",
    "href": "tutorial_0.html#keeping-everything-organized-projects-and-working-directories",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Keeping everything organized: Projects and working directories",
    "text": "Keeping everything organized: Projects and working directories\nOnce you really start working with R, you will use a lot of different files: Dataset files go into R, and all the different graphs and tables that present the results of your analysis come out again. In addition, you will have one or more code files that document your code (more on that comes below). Obviously, you need to keep an overview over the different files and where they are on your computer.\nRStudio offers you a great way to keep all these files organized: Projects. A project automatically organizes all the files you need to work with in a given context (e.g., this course) and makes sure that any outputs you create (e.g., graphs) are stored somewhere where you can find them.\n\nYou should have one (and only one) project for this course in RStudio. This project includes all the files (dataset files, code files, output) that you work with during this course. All these files should be stored in one (and only one) folder on your computer. Your project will be associated with that folder.\n\nFollow these steps to create the project:\n\nOpen File Explorer (on Windows) or Finder (on Mac) and create a folder on your computer where you want to store all the R-related files for this course (for example as Documents/Uni/3rd_semester/BST290/R_files).\nThen go back to RStudio. If you look at the top right corner of your RStudio window, you should see a little blue box symbol and “Project: (None)” written next to it (see also the screenshot on the following page). This is where you can create and open projects.\nClick on that symbol to open a little dropdown menu. Choose New Project…\nIn the menu that pops up, choose Existing Directory.\nUse the Browse… button to select the new folder you just created.\nThen click on Create Project.\n\nRStudio will then restart. When it is done restarting, you should see your project name in the upper right of your screen, next to the blue box symbol. This means that you are now working inside your new project folder. Every time you create a new file (e.g., a graph), that file will be saved in this project folder. In other words, this folder is now your “Working Directory”.1\n\n\n\n\nFinding the Projects menu",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#installing-the-tidyverse-package",
    "href": "tutorial_0.html#installing-the-tidyverse-package",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Installing the tidyverse package",
    "text": "Installing the tidyverse package\nThe first package you install is called the tidyverse package. Strictly speaking, the tidyverse is an entire collection of different R packages, but all these packages fit neatly together and are therefore bundled in a “package of packages”.\nThe tidyverse packages were designed to make things that are often difficult (data import, data cleaning & management, visualization) a lot easier (see also tidyverse.org). We will use the tidyverse a lot in this course, so it is absolutely necessary that you install it!\nYou can install the tidyverse directly from the main R “app-store”: The Central R Archive Network or CRAN.\nTo install the tidyverse package from CRAN, you just type the following code into the Console and press Enter (see also the screenshot below):\n\ninstall.packages(\"tidyverse\")\n\n\n\n\nThe R Console with code to install a package\n\n\nIf you are connected to the internet, R will now download and install the package automatically. This might take a bit, and a lot of computer code gibberish will appear on your screen — no reason to worry, this is normal!\n\n\nImportant: In some cases, R might ask you questions during the installation process (this applies to all package installations, now and in the future):\n\nIf it asks you to update packages, choose “CRAN packages only” (press 2)\nIf it asks you whether you want to “install from sources that need compilation”, choose “No” (press N)\n\n(Did you by accident choose a wrong answer to one of the questions above? No worries, just re-run the install.packages(\"tidyverse\") command above to start the installation process again.)",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#what-you-should-see",
    "href": "tutorial_0.html#what-you-should-see",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "What you should see",
    "text": "What you should see\nIf all worked out, your Console should say that “the downloaded binary packages are in…”, followed by some gibberish (see also the example screenshot below).\n\n\n\nA successfull package installation (on Mac)\n\n\nThe result will look similar on a Windows computer (but with a bit more gibberish).",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#installing-the-bst290-package",
    "href": "tutorial_0.html#installing-the-bst290-package",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Installing the bst290 package",
    "text": "Installing the bst290 package\nNext to the tidyverse package, we will also use a package that was specifically designed for this course: The bst290 package (see also github.com/cknotz/bst290). This package includes a small practice dataset and a few tools to easily create descriptive tables for your course assignments. It also includes an interactive dashboard that can help you understand the really tricky statistics-concepts we will cover in this course (the Central Limit Theorem, confidence intervals, statistical tests) better.\nThe bst290 package is not (yet) available from CRAN, but you can install it directly from GitHub. GitHub is a popular platform for computer programmers and researchers to share their code with others, and many R packages are distributed via GitHub.\nInstalling the bst290 package from GitHub involves two steps:\nFirst, you need to install the remotes package — this is used to install packages from “remote” repositories like GitHub. You can install the remotes package directly from CRAN, just like with the tidyverse package earlier.\nYou type the following into the Console and press Enter:\n\ninstall.packages(\"remotes\")\n\nYou will now see a lot more computer code gibberish running over your screen — again, nothing to worry about as long as you get the same result as earlier.\n\nFor Windows users: R might give you a warning that you should have something called RTools installed — this is not necessary for now! Just move on. If you want to install RTools anyways, you can do this in a few more steps. You can find an instruction here: https://cran.r-project.org/bin/windows/Rtools/rtools40.html.\n\n\nNext, you use the remotes package to download and install the bst290 package from GitHub. To do so, type the following code into the Console and press Enter:\n\nremotes::install_github(\"cknotz/bst290\")\n\nThis might again take a bit and you will probably again see a lot more computer gibberish appear — just hang in there. As before:\n\nIf R asks you to update packages, choose “CRAN packages only” (press 2)\nIf it asks you whether you want to “install from sources that need compilation”, choose “No” (press N)",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#installing-the-tinytex-package",
    "href": "tutorial_0.html#installing-the-tinytex-package",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Installing the tinytex package",
    "text": "Installing the tinytex package\nThe third add-on package you need to install is called tinytex. tinytex is really nothing more than a tool to install the TinyTex software automatically through RStudio. You need to have TinyTex to be able to create PDF code reports for your assignments.2\nYou install tinytex just like the other packages:\n\ninstall.packages(\"tinytex\")\n\nOnce that is complete, you run the following in your Console to install the TinyTex software:\n\ntinytex::install_tinytex()\n\nThe download and installation may take a few minutes – and there will be more code gibberish – so just hang in there!\nYou may get an error message that looks like this:\n\nFound '/Library/TeX/texbin/tlmgr', which indicates a LaTeX distribution may have existed in the system.\n\nIf that is the case, press N for No and cancel the installation. Most likely, you already have the necessary software installed to create PDF reports.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#loading-packages",
    "href": "tutorial_0.html#loading-packages",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Loading packages",
    "text": "Loading packages\nWhen you install a new app on your smartphone, it only gets installed but it does (usually) not open and run automatically. You as the user need to open it yourself.\nThis works similarly in R: Installing a package is Step 1 — you as the R user have to get active if you then want to use the new package.\n\nLoading an entire package with library()\nTo load an installed package, you normally use the library() function. For example, to load the tidyverse package, you use:\n\nlibrary(tidyverse)\n\nWhen you run this code, you will get information about the packages that get loaded (“attached”). As mentioned, the tidyverse is a collection of packages. Therefore, if you load it, it loads a whole set of different packages: ggplot2 (for visualization), dplyr for data management, or stringr for working with text.\nYou will also be told about a number of conflicts. These conflicts are nothing to worry about, at least for now.3\nYou can load the bst290 package the same way:\n\nlibrary(bst290)\n\nThere should now not be any warnings, etc.\n\n\n\nGood to know: Loading only a specific tool from a package with the “double-colon” method\nYou can also directly “call” specific functions from a package using the “double-colon” method: `package::function(). You can use this directly, without loading the entire package first.\nMaybe you notice that you already used that method earlier, when you installed the bst290 package: remotes::install_github(). In this case, you used just this one specific function from the remotes package.",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_0.html#footnotes",
    "href": "tutorial_0.html#footnotes",
    "title": "R Tutorial 0: Installation & Setup",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou can also always check where exactly your working directory currently is by using the getwd() (“get working directory”) command. So, if you enter getwd() into the Console and press the Enter-key, you will be shown the file path to the folder that you are currently working in — where all your graphs, tables, etc. get put in when you export them from R. You can also manually change your working directory with setwd(). You just need to add a valid file path within the parentheses. For example, this would be file path that I could use on my own computer: setwd(\"\"/Users/carloknotz/Documents/Work/Teaching/BST290/R_Tutorials\").↩︎\nTinyTex is a small version of the LaTeX typesetting software on your computer, which RStudio then uses to create the code reports (see also https://yihui.org/tinytex/).↩︎\nWhat this tells you is that there are certain commands (“functions”) in the packages you just loaded that have the same name as some other functions that are in use. For example, dplyr::filter() masks stats::filter() means: “There is a function called filter() in the dplyr package that was just loaded. That function has the same name as another filter() function, which is included in the stats package that comes with R right out of the box. dplyr was loaded last, so if you now use the filter() function, the one from the dplyr package will be used.”↩︎",
    "crumbs": [
      "Tutorial 0"
    ]
  },
  {
    "objectID": "tutorial_2.html",
    "href": "tutorial_2.html",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "",
    "text": "You have so far learned how to install and set up R and RStudio, how you can install and load packages, how data look like in R, and how you write and use code. All of this was essentially a warm-up.\nNow things get a bit more real: This week, you will learn how to open a real research dataset and how to explore it in R.\nBut we will take this one step at a time: You will first learn about data exploration with a small dataset that is already installed on your computer. Then you will import a real dataset (from the European Social Survey). This is to prepare you for the in-class exercises, where you will apply the data-exploration techniques you learned in the tutorial to the full-scale ESS dataset.\nImportant: As before, document your code in a dedicated scriptfile as you work your way through the tutorial – do not rely on the Console (unless you are just installing packages or quickly trying things out).\n\nHvis du ønsker å lese en norsk tekst i tillegg: “Lær deg R”, Kapittel 4",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#your-project-folder",
    "href": "tutorial_2.html#your-project-folder",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Your project folder",
    "text": "Your project folder\nThe first thing you need to do is to make sure that you are working in the Project (and the associated folder) that you created in the first seminar/lab in Week 1 of the course.1\nLook at the upper-right corner of the RStudio window and check that your project is active. It should not say: “Project: (None)”. Instead, you should see the name of the project you created. (If you do see “Project: (None)” written there, you can click on it to open a drop-down menu in which your project should be listed. You can open it there.)\nOnce you are done with make sure that you know where on your computer your project folder is; navigate there in the Windows File Explorer/Mac Finder.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#loading-the-bst290-package-and-the-practice-dataset",
    "href": "tutorial_2.html#loading-the-bst290-package-and-the-practice-dataset",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Loading the bst290 package and the practice dataset",
    "text": "Loading the bst290 package and the practice dataset\nYou will remember that you installed a number of packages previously, one of which was the bst290 package. This package includes, among other things, a small practice dataset that you will use in this and the other tutorials to get familiar with the various operations in R before you move on to the “real-deal” research datasets.\nThe practice dataset in the bst290 package is a fragment of the European Social Survey data that were collected in Norway in 2014. In essence, this practice dataset is a mini-version of the full ESS dataset. Where the full ESS includes data for more than 1000 survey participants and hundreds of variables, the practice dataset includes only data for 143 Norwegian respondents and 22 variables.\nTo access the data, you first need to load the bst290 package with the library() function:\n\nlibrary(bst290)\n\nThen you can open the dataset (which is called ess) with the data() function:\n\ndata(ess)\n\nIf everything worked, then you should now see the ess dataset listed in the Environment panel (upper right of your screen). You will probably see &lt;Promise&gt; written where the dataset summary and the variables should appear — and you can take this literally: R promises you that the dataset will appear once you start using it. So, all you need to do is to call up the dataset in some way, for example by simply typing ess into the Console.\nOnce the dataset is properly loaded, you should see in the Environment panel that the dataset includes 143 observations and 22 variables.\nYou can also get the dataset directly with the “double-colon” method:\n\ness &lt;- bst290::ess\n\nTranslated into human language, this tells R to “get the ess dataset from the bst290 package and save it under the name ess in the Environment”.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#a-first-glimpse",
    "href": "tutorial_2.html#a-first-glimpse",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "A first glimpse",
    "text": "A first glimpse\nTake a look at the ess object in the Environment tab — can you see the tiny blue circle with the white triangle/arrow inside it that is directly to the left of ess?\nIf you click on it, you can get more information about the different variables that are included in the dataset.\n\nYou should now see a list of variable names (name, essround, idno,…). Each of these variables is a collection of data points — and therefore stored as a vector in R (you may remember from the previous tutorial). All these vectors are then combined into the ess dataset (or, in R lingo, data.frame).\nNext to these names, you also see chr or num written — as you probably remember, this tells you what type of information each variable contains.\nYou may also notice that some elements in the list are followed by the phrase Factor w/ XX levels... — these are so called factors and are a particular type of vector. You will learn about them further below.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#looking-at-the-data",
    "href": "tutorial_2.html#looking-at-the-data",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Looking at the data",
    "text": "Looking at the data\nLet’s first get an idea of how the dataset really looks like, which you can do with the View() function. To do that, run the following in your Console:\n\nView(ess)\n\nA new tab should now open and you should see the entire dataset. This should look a bit like Microsoft Excel, a large table with lots of neat and orderly but boring rows and columns of data.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#printing-out-the-first-and-last-observations-with-head-and-tail",
    "href": "tutorial_2.html#printing-out-the-first-and-last-observations-with-head-and-tail",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Printing out the first and last observations with head() and tail()",
    "text": "Printing out the first and last observations with head() and tail()\nLooking at the raw dataset is often quite helpful to get a first idea of what you are working with — but is impractical when you are working with very large datasets.\nAn alternative way to get a first glimpse of your dataset is to use the head() and tail() functions. These show you the first and last six rows (observations) of your dataset — in essence, they print out the top or bottom of the dataset.\n\nDefault usage\nUsing them is simple, you just need to specify the name of your dataset within the function. For example, to display the first six observations in the ess dataset, you run:\n\nhead(ess) # This shows you the first 6 observations\n\nThe result should look like this:\n\n##   essround  idno cntry   gndr agea\n## 1        7 12414    NO   Male   22\n## 2        7  9438    NO Female   43\n## 3        7 19782    NO Female   58\n## 4        7 18876    NO Female   22\n## 5        7 20508    NO   Male   84\n## 6        7 19716    NO   Male   62\n##                                                                          edlvdno\n## 1    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 2    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 3                    Fullført 5-6 årig utdanning fra høgskole (master, hovedfag)\n## 4    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 5    Universitet/høgskole, mindre enn 3 år, men minst 2 år (høgskolekandidat, 2-\n## 6 Fullført 5-6 årig utdanning fra universitet (master, hovedfag), lengre profesj\n##   mainact           mbtru        hinctnta                              tvtot\n## 1    &lt;NA&gt;              No H - 10th decile                     No time at all\n## 2    &lt;NA&gt;              No H - 10th decile  More than 1 hour, up to 1,5 hours\n## 3    &lt;NA&gt;  Yes, currently  K - 7th decile More than 2 hours, up to 2,5 hours\n## 4    &lt;NA&gt;              No  J - 1st decile More than 1,5 hours, up to 2 hours\n## 5 Retired Yes, previously            &lt;NA&gt;                     No time at all\n## 6    &lt;NA&gt;  Yes, currently H - 10th decile  More than 1 hour, up to 1,5 hours\n##   ppltrst vote             stflife                    gincdif\n## 1       7  Yes Extremely satisfied Neither agree nor disagree\n## 2       9  Yes                   8 Neither agree nor disagree\n## 3       9  Yes                   7             Agree strongly\n## 4       5   No                   7 Neither agree nor disagree\n## 5       7  Yes                   9 Neither agree nor disagree\n## 6       7  Yes                   8          Disagree strongly\n##                      freehms imwbcnt           happy    health ctzcntr brncntr\n## 1                      Agree       4               9      Good     Yes     Yes\n## 2             Agree strongly       4               9 Very good     Yes     Yes\n## 3             Agree strongly       5               8      Good     Yes     Yes\n## 4                      Agree       5 Extremely happy Very good     Yes     Yes\n## 5 Neither agree nor disagree       5               7 Very good     Yes     Yes\n## 6                      Agree       6               8      Fair     Yes     Yes\n##   height weight\n## 1    175     65\n## 2    175     71\n## 3    150     58\n## 4    173     63\n## 5    167     58\n## 6    174     58\n\n\n\n\nLooking at specific variables\nIf the result above seems pretty cluttered and not very informative: Correct. But there is a solution. You can specify that only the first observations of a single variable are shown when you run head() or tail(). This can help when the dataset contains a larger number of variables and the output therefore becomes cluttered – as was the case here.\nTake another quick look at the Environment window: You might have noticed that there are dollar symbols ($) before each of the variable names in the ess dataset. This is a hint to how you can select single variables from a dataset: With the dollar symbol.\nThe general syntax here is: dataset$variable. For example, to select the age-variable agea from the ess dataset, you would type: ess$agea\nYou can use this with the head() function to let R show you the first six observations of only the agea-variable:\n\nhead(ess$agea)\n## [1] 22 43 58 22 84 62\n\nOf course, you can do this also with any of the other variables — and this works also with many other functions such as tail(), mean(), or summarize(). More follows!\n\n\n\nDefinining the number of observations (“rows”)\nYou can also tell R to show you more or fewer observations when you use the head() function. For example, the code below will print out the first 10 observations of the agea variable:\n\nhead(ess$agea, n = 10)\n\nYou can do the same with the tail() function.\n(A final note: As is often the case with R, there is more than one way to subset a dataset, and these allow you to select more than one variables at a time, or a specific set of observations. We will cover some of them in the next tutorial; for others see e.g.: https://www.statmethods.net/management/subset.html.)",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#a-quick-summary-of-your-data-with-summary",
    "href": "tutorial_2.html#a-quick-summary-of-your-data-with-summary",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "A quick summary of your data with summary()",
    "text": "A quick summary of your data with summary()\nWith View(), head(), or tail(), you can look at the “raw” dataset. This can give you a first idea of what you are working with, but the problem is that you always only see a few data points at a time. Ideally, you would instead get a sense of how the entire dataset or single variables as a whole look like.\nThis is where you would use summary statistics like the mean (“average”), the median, or others (as explained in Kellstedt & Whitten).\nYou can get some important summary statistics with the summary() function.\nThis function is again easy to use: You just specify which object you want summarized within the parantheses. In this case, we use the function on the entire ess dataset:\n\nsummary(ess)\n\nIf you run this, you should get a list of summary statistics for all the variables in the ess dataset. For variables that contain numbers (‘numeric’ variables, or num), you get the minimum, the 1st quartile (a.k.a., the 25th percentile), the median, the mean (‘average’), the 3rd quartile (or 75th percentile) and the maximum. Where variables have missing observations (NA’s), you get these, too.\nFor non-numeric variables (like cntry, for example) you get their ‘length’ (how many observations they contain) and their type or ‘Class’.\nBut, as before, the output is again a bit cluttered (which is also why it is not shown here). It is therefore more useful to get summary statistics for a single variable by using the $ symbol. For example:\n\nsummary(ess$agea)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   16.00   33.50   46.00   47.91   62.00   90.00\n\nHere, Min. means “Minimum”, 1st Qu. means “First Quartile”, Median and Mean are obvious, 3rd Qu. means “Third Quartile”, and Max. means “Maximum”. If you read Kellstedt/Whitten (2018, Chapter 6), then you should know how to interpret these different statistics.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#specific-summary-statistics-for-numeric-variables",
    "href": "tutorial_2.html#specific-summary-statistics-for-numeric-variables",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Specific summary statistics for numeric variables",
    "text": "Specific summary statistics for numeric variables\nWhile summary() provides you a whole list of summary statistics, you often want a specific measure of central tendency or spread for a given variable.\nThese are easy to get in R; all you need are four functions, all with quite intuitive names:\n\nmean() for the mean or “average”;\nmedian() for the median or “50th percentile”;\nvar() for the variance;\nsd() for the standard deviation;\n\nUsing these functions is straightforward — for example, to get the mean of the age-variable (agea) in the ess dataset, you just run:\n\nmean(ess$agea)\n## [1] 47.90909\n\nGetting the other summary statistics works the same way:\n\nmedian(ess$agea)\n## [1] 46\n\nsd(ess$agea)\n## [1] 18.5658\n\nvar(ess$agea)\n## [1] 344.6889\n\n\n\nWhen you have missing observations (NAs)\nIt is often the case that your variables contain missing information — indicated in R as NA. This happens for example when surveys include sensitive questions about people’s incomes or their sexual orientation, which many respondents refuse to disclose The result is then an NA (“not available”) for that particular respondent and variable.\nImportant: The mean(), median(), sd(), and var() functions (and many others) will not give you a proper result if there is even a single NA in your variable!\nFortunately, there is an easy solution: All four functions have an option to remove NAs from the data before calculating the respective summary statistic; this option is called na.rm (“NA remove”). You just have to set this option to TRUE (switch it on) to take care of missings, for example:\n\nmean(ess$agea, na.rm = TRUE)\n## [1] 47.90909\n\n(Make sure you always add a comma between different parts or “arguments” of a function!)",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#working-with-categorical-or-ordinal-variables",
    "href": "tutorial_2.html#working-with-categorical-or-ordinal-variables",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Working with categorical or ordinal variables",
    "text": "Working with categorical or ordinal variables\n\nIntroducing factors\nThe variable you have been working with so far, agea, is a typical numeric variable: It measures a respondent’s age in years, and age is by nature a number. In this case, calculating statistics such as the mean makes sense.\nBut there are also other variables such as categorical or ordinal variables, where things are a bit different. Consider for example the variable that records the respondent’s gender, gndr. Obviously, gender is by nature a categorical variable: It has two or more distinct categories (e.g., male, female, diverse), and these categories are unordered, meaning ‘male’ is obviously not a ‘higher’ or ‘better’ category than ‘female’ or ‘diverse’. They are all simply different categories people can fall (or be put) into.\nOther times, you may be dealing with ordinal variables (e.g., a Likert-scale: “disagree completely”, “disagree”,“neither”, “agree”, “agree completely”). In these cases, there is an order — but you cannot give a precise number for how much higher “agree completely” is compared to “agree”. One is more than the other, but the difference between them is not clearly defined with a number.\nIn R, categorical or ordinal variables are usually stored as factors. Factors are a separate kind of variable or “vector” (next to numeric or num and character or chr variables). You can think of factors as “numbers with labels”.\nFor example, take another look at the Environment tab (upper right of your screen) and look for the gndr variable. You can see directly that it is designated as a “Factor” with 2 levels — but also that there is a row of numbers (1,2,2,...) behind the two levels “Male” and “Female”.\nThis means:\n\nEvery male respondent gets the number 1; that number then gets the label “Male” attached to it;\nEvery female respondent gets the number 2; that number is then labeled “Female”;\n\nThe same applies also to the (many) other factor variables in the ess dataset, or other datasets. Again: Factors are essentially just numbers with text labels.\n\n\n\nIdentifying factor variables\nFirst, you should be able to identify that a given variable is indeed a factor variable. You can of course see this in the Environment, but this works only for a small dataset like the one you are using now. If you would work with the full ESS data, there would be many more variables and not all of them would be shown in the Environment.\nYou can use the class() function to let R tell you which type or class a specific variable is saved as. You use this like the other functions above (dataset$variable).\nLet’s check if the gender-variable (gndr) is really saved as a factor, as it should be:\n\nclass(ess$gndr)\n## [1] \"factor\"\n\nNow compare this to the age variable (agea):\n\nclass(ess$agea)\n## [1] \"numeric\"\n\nThis is by nature a numeric variable, and it turns out that R has stored it properly.\n\nImportant: You cannot rely on that this always works! It is often the case that one or more variables in your dataset are not stored properly, which then usually causes warnings and errors. In this case, you first need to identify the issue — and you now know how to do that — and then you need to fix it. You will learn how to do this in the next tutorial.\n\n\n\n\nGetting familiar with factor variables\nOnce you have identified a factor variable, you will usually want to learn more about it. But getting familiar with factors can be a bit tricky at first. Many summary statistics will not work here. For example, if you try to calculate the mean of a factor variable, R will refuse to do so:\n\nmean(ess$gndr)\n## Warning in mean.default(ess$gndr): argument is not numeric or logical:\n## returning NA\n## [1] NA\n\nThis does make sense: Many summary statistics are only appropriate if you are dealing with proper numbers, but here you have only categories. But this also means that you have to use different ways to learn how a factor variable in your dataset looks like.\n\n\n\nGetting the structure of a factor-type variable\nA first option is to let R print out the structure of the variable using str() (“structure”):\n\nstr(ess$gndr)\n##  Factor w/ 2 levels \"Male\",\"Female\": 1 2 2 2 1 1 1 1 1 1 ...\n\nThis tells you that gndr has two categories (“Male” & “Female”) and that these are encoded with the numbers 1 and 2 in the dataset.\nWhat is not fully clear from this output, however, is which number really corresponds to which label — are men now coded as 1 or as 2? And this is also generally one of the things that can make working with factors daunting: it is a bit difficult to see ‘under the hood’ of a factor: how its text labels correspond to the numerical values underneath.\nBut you do have a tool to figure this out!\n\n\n\nHow numerical values and text labels correspond\nThe visfactor() function in the bst290 package allows you to see which number corresponds with which label in a given factor-type variable.\nFor example, to see the labels and numerical values of the gndr variable, you would run:\n\nvisfactor(variable = \"gndr\", dataset = ess)\n##  values labels\n##       1   Male\n##       2 Female\n\n\n\n\nEmpty categories in factor-type variables\nAnother important thing to figure out is whether a particular factor variable in your dataset has empty categories. For example, you might be working with data from a survey in which respondents were asked whether they are working, in education, or unemployed — and it just so happened that none of the respondents were unemployed at the time. In this case, “unemployed” would be an empty category in the data.\nThe easiest way to see if there are empty categories in a factor variable is to let R show you how many observations you have for each of the categories of the variable. To do so, you use the table() function.\nThis is how you would do this with the gndr variable:\n\ntable(ess$gndr)\n## \n##   Male Female \n##     75     68\n\nYou see that there are 75 men and 68 women in the dataset — and there are no empty categories.\nBut now compare this to the case of the mainact variable, which tells you about the respondent’s main activity of the last seven days (whether they were working, unemployed, etc.):\n\ntable(ess$mainact)\n## \n##                                 Paid work \n##                                        15 \n##                                 Education \n##                                         7 \n##               Unemployed, looking for job \n##                                         0 \n##           Unemployed, not looking for job \n##                                         0 \n##              Permanently sick or disabled \n##                                         1 \n##                                   Retired \n##                                         7 \n##             Community or military service \n##                                         0 \n## Housework, looking after children, others \n##                                         3 \n##                                     Other \n##                                         0\n\nIt turns out that there are indeed some empty categories: There are no unemployed respondents in the dataset, and none of them was doing military or community services.\n\nAn alternative way to identify empty categories is to let R first print out which categories a factor variable can theoretically have and then compare that to what categories are actually represented in the dataset.\nTo see which categories your factor-variable can theoretically have, you use the levels() function:\n\nlevels(ess$mainact)\n## [1] \"Paid work\"                                \n## [2] \"Education\"                                \n## [3] \"Unemployed, looking for job\"              \n## [4] \"Unemployed, not looking for job\"          \n## [5] \"Permanently sick or disabled\"             \n## [6] \"Retired\"                                  \n## [7] \"Community or military service\"            \n## [8] \"Housework, looking after children, others\"\n## [9] \"Other\"\n\nYou see that the mainact variable has, in theory, nine categories in total, ranging from “Paid work” to “Other”.\nNow, to see which of these categories are really present in the data, you can use the unique() function:\n\nunique(ess$mainact)\n## [1] &lt;NA&gt;                                     \n## [2] Retired                                  \n## [3] Paid work                                \n## [4] Education                                \n## [5] Housework, looking after children, others\n## [6] Permanently sick or disabled             \n## 9 Levels: Paid work Education ... Other\n\nYou see that only five (plus the NAs) of the nine categories are listed — and being unemployed is not one of them.",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#custom-functions-for-summary-tables",
    "href": "tutorial_2.html#custom-functions-for-summary-tables",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Custom functions for summary tables",
    "text": "Custom functions for summary tables\nSince it is a statistical programming language, R can be used to generate pretty much any type of summary table for any kind of situation you could think of. In addition, there are special packages for more advanced tables, for instance:\n\ngtsummary (https://www.danieldsjoberg.com/gtsummary/index.html)\nxtable (https://cran.r-project.org/web/packages/xtable/vignettes/xtableGallery.pdf)\n\nBut: Learning how to use R functions to create tables takes a while, and using them can be tedious and prone to errors.\n\nFunctions from the bst290 package\nTo make your life easier while you take this course, you can use special functions from the bst290 package to easily generate the most important descriptive tables you will need:\n\noppsumtabell: To generate univariate summary tables; this is helpful for numeric variables.\noppsum_grupp: To get a table with summary statistics for one variable, over categories of another variable; this is helpful when you have a a numeric and a categorical variable.\n\n\n\n\n\nUsing oppsumtabell\noppsumtabell produces a table with the most important summary statistics of one or more numeric variables.2 All you need to do is specify the dataset that contains your variable(s) and the specific variables you want summary statistics for.\nFor example, to get summary statistics for the agea variable you just run:\n\noppsumtabell(dataset = ess, variables = \"agea\")\n\n Variable        agea  \n Observations    143.00\n Average          47.91\n 25th percentile  33.50\n Median           46.00\n 75th percentile  62.00\n Stand. Dev.      18.57\n Minimum          16.00\n Maximum          90.00\n Missing           0.00\n\n\nTo do the same for more than one variable, you run:\n\noppsumtabell(dataset = ess, variables = c(\"agea\",\"height\",\"weight\"))\n\n Variable        agea   height weight\n Observations    143.00 142.00 138.00\n Average          47.91 173.76  78.63\n 25th percentile  33.50 167.25  65.00\n Median           46.00 174.00  75.00\n 75th percentile  62.00 180.00  88.75\n Stand. Dev.      18.57   8.78  19.20\n Minimum          16.00 147.00  50.00\n Maximum          90.00 196.00 182.00\n Missing           0.00   1.00   5.00\n\n\nThis table shows summary statistics for age (agea) and the respondent’s body height and weight.\nCan you interpret each of the statistics shown (again, see Kellstedt/Whitten 2018, Chapter 6).\n\n\n\nNorwegian language support\nYou can choose to have the table labelled in Norwegian (NB), if you want. All you have to do is to activate the norsk-option of the oppsumtabell() function and set it to TRUE (or T):\n\noppsumtabell(dataset = ess, \n             variables = c(\"agea\",\"height\",\"weight\"),\n             norsk = TRUE)\n\n Variabel      agea   height weight\n Observasjoner 143.00 142.00 138.00\n Gjennomsnitt   47.91 173.76  78.63\n 25. persentil  33.50 167.25  65.00\n Median         46.00 174.00  75.00\n 75. persentil  62.00 180.00  88.75\n Standardavvik  18.57   8.78  19.20\n Minimum        16.00 147.00  50.00\n Maksimum       90.00 196.00 182.00\n Manglende       0.00   1.00   5.00\n\n\nIf you take a look at the new version of the table, you will see that all English labels (“standard deviation”, “observations”) are replaced with their Norwegian equivalents (“standardavvik”, “observasjoner”).\n\n\n\nExporting the table to Word\noppsumtabell also has an export-functionality: You can switch on the export-function to get a result that you can directly copy and paste into a Word document and then transform into a nice, publication-quality table.\nFor example, to export the last table from above you simply add export=TRUE to your code:\n\noppsumtabell(dataset = ess, \n             variables = c(\"agea\",\"height\",\"weight\"),\n             norsk = TRUE,\n             export = TRUE)\n## Variabel,agea,height,weight\n## Observasjoner,143.00,142.00,138.00\n## Gjennomsnitt, 47.91,173.76, 78.63\n## 25. persentil, 33.50,167.25, 65.00\n## Median, 46.00,174.00, 75.00\n## 75. persentil, 62.00,180.00, 88.75\n## Standardavvik, 18.57,  8.78, 19.20\n## Minimum, 16.00,147.00, 50.00\n## Maksimum, 90.00,196.00,182.00\n## Manglende,  0.00,  1.00,  5.00\n\nThis result arguably looks even less presentable than the other one, but:\n\nCopy the result as it is displayed in the Console (see also the screenshot below);\nOpen a Word document;\nPaste the copied text into the document;\nSelect the copied text and, in Word, open the ‘Table’ menu in the menu bar at the top; there, select ‘Convert’ and then `Convert text to table…’;\nIn the menu, under “Separate text at” (“Skill tekst ved”), select “Other” (“Annet”) and enter a comma into the field next to that option. The number of columns at the top should then also automatically adjust. Then click ‘OK’;\nPolish the table using the familiar options in Word;\n\n\n\n\nSelecting & copying the results from the R console\n\n\n\n\n\nUsing oppsum_grupp\nSometimes you want summary statistics for one variable, but separately for different categories of another variable. For example, assume you are interested in whether (and if yes, by how much) Norwegian men are on average taller than Norwegian women.\nThe oppsum_grupp() function produces a summary table that contains the same statistics as the ones you get from oppsumtabell(), but now broken down by categories of a second variable (which should ideally have only a few distinct categories!).\nTo get summary statistics for body height for men and women separately (i.e., over the categories of gndr) you run:\n\noppsum_grupp(dataset = ess, variable = \"height\", by.var = \"gndr\")\n##  gndr   Observations Average Stand. Dev. 25th percentile Median 75th percentile\n##  Female 67           167.87  6.66        164.00          168.00 173.00         \n##  Male   75           179.03  6.90        174.00          178.00 183.50         \n##  Minimum Maximum Missing\n##  147.00  180.00  1      \n##  165.00  196.00  0\n\nYou can see that men are, on average, around 11 centimeters taller than women, and that the smallest woman is smaller than the smallest man (and the same for the tallest individuals in the sample).\nLike oppsumtabell(), oppsum_grupp() also has an export function (export = TRUE) and Norwegian language support (norsk = TRUE).\n\n\n\nFurther help\nYou now know how to get quick summary statistics for a dataset or specific variables in a dataset. Of course, this tutorial covered only the essentials and there are many other ways to summarize your data. But these essentials should help you when you do your first steps as a political or social data analyst.\nAlso, if you want to get more detailed help on any of the functions covered in this tutorial, you can always resort to the functions’ help files. For example, to get the help file for the mean() or oppsumtabell() functions, you just type the following into your Console tab and press Enter:\n\n?mean\n?oppsumtabell\n\nThe help files also contain examples that show you how to use the functions. Feel free to explore!",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#the-european-social-survey",
    "href": "tutorial_2.html#the-european-social-survey",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "The European Social Survey",
    "text": "The European Social Survey\nThe European Social Survey (ESS) is a large survey project that is conducted in countries all over Europe, including in Norway, and which has been running for several years now. In each round, between several hundred to more than 2000 randomly selected persons in each participating country give information (anonymously, of course) about their political opinions and behavior, their views about society, and their income, jobs, work situation, and families. Their responses are then made machine-readable and stored in dataset files, which anyone can use for free.\nYou can use the ESS to study, for example, why people vote or participate otherwise politically (e.g., by joining demonstrations or protests), which parties they voted for, how people think about social inequality, climate change, sexuality, the welfare state, and many other topics. Political scientists and sociologists often use data from the ESS in their research.3\nSee https://www.europeansocialsurvey.org/ for more details.\n\n\nAccessing & downloading ESS data\nYou can access all data from the ESS via the SIKT Data Portal: https://ess.sikt.no/en/.4\nOnce you have the page open:\n\nScroll down and choose ESS Round 7 – 2014. Immigration, Social inequalities in health.\nChoose ESS7 - integrated file, edition 2.3. You will then be forwarded to another page.\nClick on the red “Download” button that is shown on the upper right of your screen.\nYou should then be forwarded a login page. Choose “Logg in med Feide” and use your UiS credentials to log in. (you may be able to jump over that step if you are already logged on to Feide, e.g., via Canvas).\nOnce you are logged in, you will be directed back to the ESS Data Portal – and you will now see three different download buttons (CSV, SPSS, Stata) on the upper right of your screen.\nClick on the Stata button.\nThe data and a few other files will be downloaded as part of a compressed ZIP file. Unpack and open that file. The folder that opens will contain one file that ends with .dta.5\nThe file ending with .dta is the dataset file. Copy/move this file into your project folder (in Windows File Explorer/Mac Finder). Ideally, give the file a shorter name that is easier to type (e.g., ess7.dta).\n\nOnce you have your data file stored within your project folder, you can go back to RStudio.\nHere, you can check if everything worked by opening the Files tab in the lower-right corner. The dataset file should be listed here (next to all the other files in this folder).",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#importing-data-with-haven-and-labelled",
    "href": "tutorial_2.html#importing-data-with-haven-and-labelled",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Importing data with haven and labelled",
    "text": "Importing data with haven and labelled\nR by itself can open some types of dataset files, but not all of them. Among the types of files that R itself cannot open are those that were created for other (commercial) data analysis programs:\n\n.sav, the file format for SPSS\n.dta, the file format for Stata\n.sas7bdat, the file format for SAS\n\nThe ESS dataset file you just downloaded is a .dta file — which means this dataset is saved in the Stata file format, and R by itself cannot open it.\nBut, luckily, there are a few packages that allow you to import these types of files into R. One of these is the haven package, and this is the one we will be using in this course.6 haven is a part of the tidyverse collection (see https://haven.tidyverse.org/), which means that you already installed it when you installed the tidyverse earlier.\n\nJust in case: If R gives you an error message (e.g., “Package labelled not found), you may have to quickly install the two packages with:\n\ninstall.packages(\"haven\")\ninstall.packages(\"labelled\")\n\n\nhaven includes three functions to import the three main “commercial” dataset file formats:\n\nread_sav() for .sav files\nread_dta() for .dta files\nread_sas() for .sas7bdat files\n\nTherefore, to import the ESS dataset that you just downloaded in .dta format, you would use read_dta().\nImportant: haven has a bit of a quirk in that it has its own way of organizing a dataset within R – called the labelled format – and that can take a bit to get used. To keep things simple, we convert the dataset to the “normal” format for R. To do that, we use the labelled::unlabelled() function.\n\nPutting all this together: To import the dataset file, you would use:\n\ness7 &lt;- labelled::unlabelled(haven::read_dta(\"ess7.dta\"))\n\nHere, haven::read_dta() uses the read_dta() function from haven to import the dataset – and then we directly convert it with labelled::unlabelled() and save the result as ess7.\n\n\nGenerating a data dictionary\nIf you take a quick look at the ess7 data object in the Environment, you notice that it contains 601 variables. Such a large number of variables is typical for a real-life survey dataset, but it also means that it can be difficult to get an overview over all the variables and their values.\nFortunately, there is a function to easily create a data dictionary or codebook that is included in labelled: the generate_dictionary() function.\nUsing this function is easy — you just need to make sure to save the function’s output in a new object like dict_ess7:\n\ndict_ess7 &lt;- labelled::generate_dictionary(ess7)\n\nYou will now see a new object in your Environment called dict_ess7.7 If you now run View(dict_ess7), you get a neat table that shows you the name, label, and value labels of all the variables in your dataset.\nNow you know how you can get survey data for Norway and many other countries on a wide variety of topics from a highly trusted source! Take also a few minutes to explore the ESS website and their Data Portal to see which topics they cover and which variables they have in each survey round!",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorial_2.html#footnotes",
    "href": "tutorial_2.html#footnotes",
    "title": "Tutorial 2: Importing & exploring your data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDid you miss that session? You can read about Projects and how you create them here: https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects or in Lær deg R, 4.1.1.3.↩︎\nIt does also work with factor variables, but you will get a warning message.↩︎\nExamples are: Rehm, P. (2009). Risks and redistribution: An individual-level analysis. Comparative Political Studies, 42(7):855–81; Giger, N. and Nelson, M. (2013). The welfare state or the economy? Preferences, constituencies, and strategies for retrenchment. European Sociological Review, 29(5):1083–94; Hooghe, M., Reeskens, T., Stolle, D., and Trappers, A. (2009). Ethnic diversity and generalized trust in Europe: A cross-national multilevel study. Comparative Political Studies, 42(2):198– 223; Gallego, A. (2007). Unequal political participation in Europe. International Journal of Sociology, 37(4):10–25; or Finseraas, H. (2008). Immigration and preferences for redistribution: An empirical analysis of European survey data. Comparative European Politics, 6(4):407–431.↩︎\nAlternatively, go to https://www.europeansocialsurvey.org/ and click on “Data” in the menu at the top. On the following page, click on “ESS Data Portal” button.↩︎\nIf you cannot see the file endings (“extensions”), you need to activate this in File Explorer/Finder. You should find instructions for your particular operating system if you google for example “show file extensions in Windows” or “show file extensions in Mac”.↩︎\nOther alternatives are foreign, memisc, or readstata13.↩︎\nTechnically, the dict_ess7 dictionary is itself a dataset-type object, which means you can also do some data exploration with it. This goes beyond the scope of this tutorial, but feel free to play around with it.↩︎\nIf there are no tutorials called “De-bugging exercises:…” shown, just restart R by clicking on “Session” in the menu at the top of your screen, and there on “Restart R”. You may also have to install the learnr package — in that case, RStudio will let you know and you only have to do this once.↩︎",
    "crumbs": [
      "Tutorial 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Currently work in progress!!!\nThis website features all R tutorials for the BST290 Kvantitativ forskningsmetode course. Simply use the menu on the side to navigate to and between the different tutorials and use the search field to find tutorials with specific contents.\nThat’s it :-) Lykke til!",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "tutorial_1.html",
    "href": "tutorial_1.html",
    "title": "Tutorial 1: Your first steps in R",
    "section": "",
    "text": "In the previous tutorial, you have learned how you can install R and RStudio and how you install add-on packages.\nBut even if you managed to get everything to work, it might still have felt strange to work with computer code.\nThe aim of this tutorial is to help you get familiar with R and more used to writing code. This means that you will do a few simply warm-up exercises and learn about the main logic of R and R code.\n\nHvis du ønsker å lese en norsk tekst i tillegg: “Lær deg R”, Kapittel 2 & 4.1.1",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#calculating-with-r",
    "href": "tutorial_1.html#calculating-with-r",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Calculating with R",
    "text": "Calculating with R\nOne thing that can help you get familiar with R is to simply use it as a calculator — which you can do easily because, in essence, R is just a very fancy, very powerful pocket calculator.\nTo do that, click into the Console window so that a small vertical blinking line (“cursor”) appears behind the &gt; symbol. Then type 1 + 1 and hit the Enter-key.\nThe result should look like this:\n\n1+1\n## [1] 2\n\nYou can of course also do much more complicated calculations such as:\n\n(12*78)/(0.5-7000)+42.541-8*98\n## [1] -741.5927\n\nYou can do all common mathematical operations that you know from (high) school in R:\n\n+ adds two numbers\n- subtracts one number from another\n* multiplies two numbers\n/ divides one number by another\n( and ) are parentheses (to separate out a specific part of the calculation)\n^ means “raise to the power of” — 2^2 means 2*2 (or “two squared”), 2^3 means 2*2*2, and so on",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#working-with-text-and-your-first-error-message",
    "href": "tutorial_1.html#working-with-text-and-your-first-error-message",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Working with text (and your first error message)",
    "text": "Working with text (and your first error message)\nClearly, R can handle numbers quite well — which is not surprising, given that R is a statistical programming language. But R can also handle text, as long as the text is entered correctly.\nTo see what this means, let’s have a look at what happens when you handle text incorrectly: type the following into the Console and hit “Enter”:\n\nHello world!\n\nYou should now receive your first error message (the first of many…sorry!): Error: unexpected symbol in \"Hello world\"\nHere is what happened: When you enter letters or words into the R Console, R thinks that you are entering a command (“function”). It then looks into its internal library of commands and, if it does not find a command that corresponds to the word you entered, it returns an error message. Unexpected symbol basically means “I don’t understand what you want from me.”\nYou can tell R to treat something as text and not as a command by placing it within quotation marks. See what happens when you enter the following into your Console:\n\n\"Hello world!\"",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#the-assignment-operator--",
    "href": "tutorial_1.html#the-assignment-operator--",
    "title": "Tutorial 1: Your first steps in R",
    "section": "The assignment operator (<-)",
    "text": "The assignment operator (&lt;-)\nTo save something in an object, you use the assignment operator: &lt;- (the “smaller than” sign, &lt;, plus a dash, -)\nFor example, x &lt;- 5 tells R to “store 5 into the object x” (or, put differently, “assign the value of 5 to x”).\nSee for yourself what happens when you type the following into your Console and hit enter:\n\nx &lt;- 5\n\nYou will now not see any output in the Console — instead, you should see an item appear in your work environment (on the upper right side of your screen). You see that the value of 5 has indeed been stored as the x object.\nTry storing another number as y, for example:\n\ny &lt;- 7\n\nAs mentioned before, you can also store text. Run the following in your Console:\n\nz &lt;- \"statistics is pointless\"\n\nYou should now see the z object containing the phrase “statistics is pointless” appear in your work environment.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#shortcutting-the-assignment-operator",
    "href": "tutorial_1.html#shortcutting-the-assignment-operator",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Shortcutting the assignment operator",
    "text": "Shortcutting the assignment operator\nWhen working with R, you will use the assignment operator a lot. Basically all the time.\nIt therefore makes sense to add a keyboard shortcut specifically for the assignment operator so that you do not have to twist your fingers into a knot every time you want to store something in an object.\nThis is easy to do in RStudio: Go to “Tools” in the taskbar at the top and choose “Modify keyboard shortcuts”; use the little search/filter field to search for “assignment”. The entry “Insert assignment operator” should appear. Use the existing shortcut, or change it to one that suits you.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#using-stored-objects",
    "href": "tutorial_1.html#using-stored-objects",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Using stored objects",
    "text": "Using stored objects\nWhat if you want to re-use the objects you stored? Easy. You just call them up by typing their name into the Console.\nFor example, to retrieve the number you stored in the x object, you just type x into the Console and hit “Enter”.\nTry retrieving all the stored values, x, y, and z (one at a time!).\nYou can also use these stored items, for example in calculations. Try it out, type the following into your Console and hit “Enter”:\n\nx + y\n\nObviously, mathematical operations only make sense if you work with stored numbers. This does not work with text. (Feel free to try it anyways! See what happens when you run y + z.)",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#storing-multiple-numbers-or-words",
    "href": "tutorial_1.html#storing-multiple-numbers-or-words",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Storing multiple numbers or words",
    "text": "Storing multiple numbers or words\nNow comes a very important step: We are moving from storing single pieces of information (one “datum”) to storing multiple pieces of information (“data”).\nTo store multiple items together you use a very important command or “function”: c()\nc() stands for “combine” — you use it to combine pieces of information (“data points”) in a single object. The c() function is easy to use. You just add the things you want to store within the parentheses, separated by commas.\nTo see how it works, run the following code to store the sequence of the numbers 1 through 4 into the object a (or, “assign” them to the object a)\n\na &lt;- c(1,2,3,4)\n\nYou can also store a sequence of words as long as you put them into quotation marks and separate them with commas. Give it a try by running the following code:\n\nb &lt;- c(\"statistics\",\"is\",\"pointless\")",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#on-names-for-r-objects",
    "href": "tutorial_1.html#on-names-for-r-objects",
    "title": "Tutorial 1: Your first steps in R",
    "section": "On names for R objects",
    "text": "On names for R objects\nYou have just learned about objects — the little containers in which you can store different values. When working in R, you will usually work with many different objects: Your main dataset will be one object in your Environment, but you may also be working with more than one dataset at a time or have other things stored in different objects. This means it is important that you always know what each object is — you have to give them useful and informative names!\nYou can choose essentially freely how to name your objects — just like you can freely choose how you name any Microsoft Word document you are working on. For example, you could name a Word Document “BST290_CoursePaper_draft15.docx” or “CoursePaper_BST290_draft23.docx”, or “StupidStatsCourse_Paper_almostdone_Version56.docx”, or any other name you want. The same applies to your R objects: You can name them, in principle, in any way you like.\nBut: Do make sure you always pick names that are informative so you don’t get confused! For example, once you work with a full dataset, you should give it a meaningful name like my_dataset and not just x or y! You should also avoid naming objects like important commands — so, don’t call your dataset object mean because there is a command in R to calculate the mean (“average”) that is called mean(). You obviously don’t want any confusion there…",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#briefly-on-commands-functions",
    "href": "tutorial_1.html#briefly-on-commands-functions",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Briefly on commands (“functions”)",
    "text": "Briefly on commands (“functions”)\nA bit earlier, you used the c()-command or c()-function to combine sets of items into an object.\nFunctions are a central component of the R language. You can think of functions as the R language’s verbs — the “do stuff” words. You can tell that something is a function if it has parentheses: ().\nFor example,\n\nc() is the command to tell R: “combine the following items together”\nmean() is the command to tell R to calculate the mean (“average”) of a set of numbers\ndownload.file() is the command to tell R — you guessed it — to download a file from the internet\nrm() is the command to tell R to remove (“delete”) an object from the work environment\n\nFunctions work by the following principle:\n\nThe name of the function — the text before the parentheses (mean, download.file,…) — specifies what operation you want to be done.\nWithin the parentheses, you specify the object(s) that the operation should be done with (and, if available, any options). In the official R lingo, the content within the parentheses is called arguments.\n\nLet’s look at two functions in action (run these in your Console, one at a time):\n\nbodyheight_data &lt;- c(187,156,198,183,175,171)\n\nmean(bodyheight_data)\n\n[1] 178.3333\n\n\nHere, you use two different functions:\n\nYou first use c() to store a collection of values, measurements of the body heights of a fictional group of people, as bodyheight_data.\nThen you let R calculate the average body height in this group using the mean() function.\n\nThere are obviously many, many, many more functions in the R language. No reason to worry, you will learn them one at a time.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#from-single-commands-to-script-files",
    "href": "tutorial_1.html#from-single-commands-to-script-files",
    "title": "Tutorial 1: Your first steps in R",
    "section": "From single commands to script files",
    "text": "From single commands to script files\nSo far, you have just entered a few individual functions into the R Console and then looked at the results. This is fine for a very first introduction, but later on — when things get more serious — you will write many more and also more complex functions and you will want to run them directly after each other. Also, you will usually work on any single data analysis project for a longer period of time. For example, you might do all your data management and cleaning on one day and then do the actual data analysis on the next day. In that case, you obviously do not want to have to re-enter all the code from the first day when you start again on the following day.\nThis means you need some place where you can write longer sequences of code and then save everything so you do not have to start from the beginning every time you need to interrupt your work. This is why you use script files.\nScript files contain all the code that you write for a specific data analysis project.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#writing-and-running-a-script-file",
    "href": "tutorial_1.html#writing-and-running-a-script-file",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Writing and running a script file",
    "text": "Writing and running a script file\nTo make this more concrete, let’s open a script file on your own computer: In the taskbar at the top of your screen, go to “File” -&gt; “New File” -&gt; “R Script” (alternatively, press “Ctrl+Shift+N” on Windows or “Command+Shift+N” on Mac).\nThe left-hand side of your screen should now split in two: The Console moves to the bottom half and an entirely empty file with a blinking cursor appears in the top half. The new file at the top is your script file.\nFirst, save the file (“File” -&gt; “Save as”) and give it an informative name (e.g., r_tutorial1.R).\nThen write the following code to generate two new vectors into your script file:\n\nbodyweight_data &lt;- c(85.3,75.6,114.2,56.9)\n\nfruit &lt;- c(\"banana\",\"apple\",\"orange\",\"cherry\")\n\nNow you have some code (which should like in the image below) — but you may wonder how you run it? You could of course copy-paste it line by line into the Console below, but that would be annoying.\nInstead, select the code either with your mouse or with the Shift + arrow keys — just like you would select text in a Word document. The result should look like in the screenshot below:\n\n\n\nSelected code in a script file\n\n\nTo run this code, move your mouse to the top right corner of the script file (not the entire window!) — there is a little button with a white square and green arrow that says “Run”. Click on that button to run your code.\nYou will see that the commands you selected to run get “transferred” to the Console and then executed. This is the normal way to work in R: You write (and save!) code in your scriptfile, and you also run it from there. The Console is only used for small, less important things (e.g., when you quickly want to look at a stored object or want to try out something).\nYou can also create a keyboard shortcut to run code. This is strongly recommended because it will make your life easier. To find out what the current shortcut to run selected code is, navigate again to the relevant menu (“Tools” -&gt; “Modify Keyboard Shortcuts”; search for “Run current line or selection”; use the existing shortcut or modify it as desired).",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#comments-in-a-script-file",
    "href": "tutorial_1.html#comments-in-a-script-file",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Comments in a script file",
    "text": "Comments in a script file\nSometimes you might want to add notes or comments to your code, for example to explain to others (or your future self) what a particularly complicated piece of code does. Obviously, you then need to tell R to ignore these comments or you will get an error message.\nYou can add comments in a script file with the hash symbol (#). R will then ignore everything that comes after #. For example:\n\n# mean(bodyweight_data) &lt;- R ignores all of this\n\n# Some comment &lt;- R ignores this too\n\nmean(bodyweight_data) # &lt;- this code is run, but everything after the hash is ignored",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#keeping-your-code-neat-and-tidy",
    "href": "tutorial_1.html#keeping-your-code-neat-and-tidy",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Keeping your code neat and tidy",
    "text": "Keeping your code neat and tidy\nIt is important that you keep your script files organized and easy to read — especially for yourself. You should be able to open the scriptfile for an analysis that you did two years ago and understand, at least after a bit of reading, what you did and how you did it. This means:\n\nUse comments to provide a title for each file plus relevant information and explanations for each bit of code\nLoosen it up: Add empty lines between code ‘chunks’ that belong together\n\nFor example, this is how you could organize a simple scriptfile (this code will not make sense to you now, but you should be able to understand most of it by the end of this course):\n\n#########################\n# Example analysis script\n#########################\n\n# Carlo Knotz (March 17, 2022)\n\nlibrary(tidyverse) # add-on package for data management & visualization\n\n# Data management\n#################\n\n# Downloading data\ncpds &lt;- haven::read_dta(\"https://www.cpds-data.org/images/Update2021/CPDS_1960-2019_Update_2021.dta\")\n\n# Data cleaning (selecting relevant variables, changing name of one)\ncpds %&gt;%\n  select(country,year,openc,realgdpgr,debt_hist,gov_left1,gov_right1) %&gt;%\n  rename(growth = realgdpgr) -&gt; cpds\n\n\n# Descriptive graph\n###################\n\n# Average growth rate, by country\ncpds %&gt;%\n  group_by(country) %&gt;%\n  summarise(growth = mean(growth, na.rm = T)) %&gt;%\n  ggplot(aes(y = reorder(country,growth), x = growth)) +\n    geom_bar(stat = \"identity\") +\n    labs(x = \"Average economic growth rate (%)\",\n         y = \"\") +\n    theme_bw()\n\n# ...and so on...",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#vectors-variables",
    "href": "tutorial_1.html#vectors-variables",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Vectors & variables",
    "text": "Vectors & variables\nYou have previously learned that R stores collections of data points as vectors. But you may also remember from the lecture and Kellstedt & Whitten that we, as social scientists, have also another name for collections of data points: variables.\nMeasurements of a variable are really nothing else than collections of data points (usually numbers, but sometimes also text). For example, the (fictional) set of body height measurements we created earlier could be measurements of a variable (“body height”) that comes from a research project.\n\nbodyheight_data\n## [1] 187 156 198 183 175 171\n\n\nThe important point to remember: In R, variables are represented as vectors — as collections of data points.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#datasets",
    "href": "tutorial_1.html#datasets",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Datasets",
    "text": "Datasets\nWhen you do a statistical analysis, you usually work with more than one variable (i.e., vector) because you usually want to know how one or more variables are related to another variable (as explained in Chapter 1 in Kellstedt & Whitten). To be able to work with two or more variables at the same time, they need to be “tied together” — and this is, in essence, what a dataset is: Several variables/vectors tied together.\nTo see what a dataset in R looks like, you can open one of the many “toy” datasets that are built into R: the “Violent Crime Rates by US State” (USArrests) dataset.1\nTo view this dataset, you just have to type USArrests into the Console and hit Enter. The result should look like this:\n\nUSArrests\n##                Murder Assault UrbanPop Rape\n## Alabama          13.2     236       58 21.2\n## Alaska           10.0     263       48 44.5\n## Arizona           8.1     294       80 31.0\n## Arkansas          8.8     190       50 19.5\n## California        9.0     276       91 40.6\n## Colorado          7.9     204       78 38.7\n## Connecticut       3.3     110       77 11.1\n## Delaware          5.9     238       72 15.8\n## Florida          15.4     335       80 31.9\n## Georgia          17.4     211       60 25.8\n## Hawaii            5.3      46       83 20.2\n## Idaho             2.6     120       54 14.2\n## Illinois         10.4     249       83 24.0\n## Indiana           7.2     113       65 21.0\n## Iowa              2.2      56       57 11.3\n## Kansas            6.0     115       66 18.0\n## Kentucky          9.7     109       52 16.3\n## Louisiana        15.4     249       66 22.2\n## Maine             2.1      83       51  7.8\n## Maryland         11.3     300       67 27.8\n## Massachusetts     4.4     149       85 16.3\n## Michigan         12.1     255       74 35.1\n## Minnesota         2.7      72       66 14.9\n## Mississippi      16.1     259       44 17.1\n## Missouri          9.0     178       70 28.2\n## Montana           6.0     109       53 16.4\n## Nebraska          4.3     102       62 16.5\n## Nevada           12.2     252       81 46.0\n## New Hampshire     2.1      57       56  9.5\n## New Jersey        7.4     159       89 18.8\n## New Mexico       11.4     285       70 32.1\n## New York         11.1     254       86 26.1\n## North Carolina   13.0     337       45 16.1\n## North Dakota      0.8      45       44  7.3\n## Ohio              7.3     120       75 21.4\n## Oklahoma          6.6     151       68 20.0\n## Oregon            4.9     159       67 29.3\n## Pennsylvania      6.3     106       72 14.9\n## Rhode Island      3.4     174       87  8.3\n## South Carolina   14.4     279       48 22.5\n## South Dakota      3.8      86       45 12.8\n## Tennessee        13.2     188       59 26.9\n## Texas            12.7     201       80 25.5\n## Utah              3.2     120       80 22.9\n## Vermont           2.2      48       32 11.2\n## Virginia          8.5     156       63 20.7\n## Washington        4.0     145       73 26.2\n## West Virginia     5.7      81       39  9.3\n## Wisconsin         2.6      53       66 10.8\n## Wyoming           6.8     161       60 15.6\n\nYou see that the dataset contains statistics about arrests for violent crimes in all U.S. States (in 1973).2\nNote that:\n\nEach row is a state (e.g., Alabama, Alaska, etc.);\nEach column is a variable that records the arrest rate for a given crime and the share of the population living in big cities (UrbanPop).\n\nImportantly, each of the variables by itself is just a sequence of numbers — or a vector — but, together, they form a dataset. And this is also how a dataset should ideally be organized: Each row is an observation, each column is a variable. A dataset that is organized like this is called a tidy dataset.3 In R, datasets are stored as so-called data.frames.4\nThe datasets you will work with during this course will be organized like this — but, in real life, datasets are often messy and need to be reorganized before you can really work with them. This is why this course includes a part on Data Management.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#creating-a-data.frame-yourself",
    "href": "tutorial_1.html#creating-a-data.frame-yourself",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Creating a data.frame yourself",
    "text": "Creating a data.frame yourself\nWhen doing a data analysis in R, you will normally work with large to very large datasets that you import in one go — typing them in by in is obviously not an option then.\nBut you can create datasets by yourself, and doing so is a good way to understand better how to work with this type of object.\nYou can create your own data.frame with the data.frame() function. When you use this function, you go variable by variable – or column by column: You first type the name and value of one column, and then repeat that for all other columns.\nFor example, let’s assume you had collected a tiny dataset about some local students at UiS. This dataset has four observations (i.e., four rows) and three variables (columns). The rows are different four different students, and the variables include name, age, and hometown. The values are as shown below and we save the dataset as studata.\nThis is how you create a dataset of these four students (you should write this in your new scriptfile):\n\nstudata &lt;- data.frame(name = c(\"Janne\",\"Tore\",\"Siri\",\"Ola\"),\n                      age = c(23,21,19,22),\n                      hometown = c(\"Stavanger\",\"Oslo\",\"Tromso\",\"Bergen\"))\n\nWhen you take a closer look at the code, you see that each variable name (name, age,…) is followed by a set of values that together form the variables. Also, notice that values that are text (the names and hometowns) are put in quotation marks but not those that are true numbers (the students’ ages).\nWhen you now run this code (as described earlier), the studata object should appear under Data in the Work Environment. If you then click on the little blue circle with the white triangle in it (next to studata), you will also get an overview over the contents of the dataset: The variables and what types they are.\nYou can also see the structure of your new dataset more clearly if you print it out in the Console. To do that, you simply type the name of the stored dataset into the Console and press “Enter”:\n\nstudata\n##    name age  hometown\n## 1 Janne  23 Stavanger\n## 2  Tore  21      Oslo\n## 3  Siri  19    Tromso\n## 4   Ola  22    Bergen\n\nYou can directly see the structure of the dataset: Observations (students) in rows, variables (name, age,…) in columns.",
    "crumbs": [
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial_1.html#footnotes",
    "href": "tutorial_1.html#footnotes",
    "title": "Tutorial 1: Your first steps in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo see what other “toy” datasets you have available, run data() in your Console.↩︎\nRun ?USArrests in the Console to open the documentation of the dataset, which will give you more detailed information.↩︎\nSee also Wickham, H. (2014). Tidy data. Journal of Statistical Software, 59(10):1–23.↩︎\nThere are also other types of dataset-objects such as the tibble (https://tibble.tidyverse.org/), but they all look and work more or less the same way.↩︎",
    "crumbs": [
      "Tutorial 1"
    ]
  }
]