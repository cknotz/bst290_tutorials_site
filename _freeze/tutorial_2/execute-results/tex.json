{
  "hash": "ad6e7fafb39f66928f12d48a729bb9d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 2: Importing & exploring your data\"\nauthor: \"Carlo Knotz\"\nbibliography: /Users/carloknotz/Documents/BibDesk_library/library.bib\ntoc: true\nnumber-sections: true\nformat:\n  html: default\n  pdf: default\nlightbox: true\nlang: en\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n# Introduction\n\nYou have so far learned how to install and set up `R` and `RStudio`, how you can install and load packages, how data look like in `R`, and how you write and use code. All of this was essentially a warm-up.\n\nNow things get a bit more real: This week, you will learn how to open a real research dataset and how to explore it in `R`.\n\nBut we will take this one step at a time: You will first learn about data exploration with a small dataset that is already installed on your computer. Then you will import a real  dataset (from the *European Social Survey*). This is to prepare you for the in-class exercises, where you will apply the data-exploration techniques you learned in the tutorial to the full-scale ESS dataset.\n\n\n**Important:** As before, document your code in a dedicated scriptfile as you work your way through the tutorial -- do not rely on the *Console* (unless you are just installing packages or quickly trying things out).\n\n::: {.callout-tip}\n\n*Hvis du ønsker å lese en norsk tekst __i tillegg__: \"Lær deg R\", Kapittel 4*\n\n:::\n\n\\newpage\n\n# Setup\n\n## Your project folder\n\nThe first thing you need to do is to make sure that you are working in the *Project* (and the associated folder) that you created in the first seminar/lab in Week 1 of the course.^[Did you miss that session? You can read about *Projects* and how you create them here: <https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects> or in *Lær deg R*, 4.1.1.3.]\n\nLook at the upper-right corner of the *RStudio* window and check that your project is active. It should __not__ say: \"Project: (None)\". Instead, you should see the name of the project you created. (If you do see \"Project: (None)\" written there, you can click on it to open a drop-down menu in which your project should be listed. You can open it there.)\n\nOnce you are done with make sure that you know where on your computer your project folder is; navigate there in the Windows File Explorer/Mac Finder.\n\n\\newpage\n## Loading the `bst290` package and the practice dataset\n\nYou will remember that you installed a number of *packages* previously, one of which was the `bst290` package. This package includes, among other things, a small practice dataset that you will use in this and the other tutorials to get familiar with the various operations in `R` before you move on to the \"real-deal\" research datasets.\n\nThe practice dataset in the `bst290` package is a fragment of the *European Social Survey* data that were collected in Norway in 2014. In essence, this practice dataset is a mini-version of the full ESS dataset. Where the full ESS includes data for more than 1000 survey participants and hundreds of variables, the practice dataset includes only data for 143 Norwegian respondents and 22 variables.\n\nTo access the data, you first need to load the `bst290` package with the `library()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bst290)\n```\n:::\n\n\n\n\n\n\nThen you can open the dataset (which is called `ess`) with the `data()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(ess)\n```\n:::\n\n\n\n\n\n\nIf everything worked, then you should now see the `ess` dataset listed in the *Environment* panel (upper right of your screen). You will probably see `<Promise>` written where the dataset summary and the variables should appear --- and you can take this literally: `R` promises you that the dataset will appear once you start using it. So, all you need to do is to call up the dataset in some way, for example by simply typing `ess` into the *Console*.\n\nOnce the dataset is properly loaded, you should see in the *Environment* panel that the dataset includes 143 observations and 22 variables.\n\nYou can also get the dataset directly with the \"double-colon\" method:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ness <- bst290::ess\n```\n:::\n\n\n\n\n\n\nTranslated into human language, this tells `R` to \"get the `ess` dataset from the `bst290` package and save it under the name `ess` in the *Environment*\".\n\n\\newpage\n# Exploring data in `R`\n\n## A first glimpse\n\nTake a look at the `ess` object in the *Environment* tab --- can you see the tiny blue circle with the white triangle/arrow inside it that is directly to the left of `ess`?\n\nIf you click on it, you can get more information about the different variables that are included in the dataset. \n\n* You should now see a list of variable names (`name`, `essround`, `idno`,...). Each of these variables is a collection of data points --- and therefore stored as a *vector* in `R` (you may remember from the previous tutorial). All these vectors are then combined into the `ess` dataset (or, in `R` lingo, `data.frame`). \n* Next to these names, you also see `chr` or `num` written --- as you probably remember, this tells you what type of information each variable contains.\n* You may also notice that some elements in the list are followed by the phrase `Factor w/ XX levels...` --- these are so called `factors` and are a particular type of vector. You will learn about them further below.\n\n## Looking at the data\n\nLet's first get an idea of how the dataset really looks like, which you can do with the `View()` function. To do that, run the following in your *Console*:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(ess)\n```\n:::\n\n\n\n\n\n\nA new tab should now open and you should see the entire dataset. This should look a bit like Microsoft Excel, a large table with lots of neat and orderly but boring rows and columns of data.\n\n\\newpage\n\n## Printing out the first and last observations with `head()` and `tail()`\n\nLooking at the raw dataset is often quite helpful to get a first idea of what you are working with --- but is impractical when you are working with very large datasets.\n\nAn alternative way to get a first glimpse of your dataset is to use the `head()` and `tail()` functions. These show you the first and last six rows (observations) of your dataset --- in essence, they print out the top or bottom of the dataset.\n\n### Default usage\n\nUsing them is simple, you just need to specify the name of your dataset within the function. For example, to display the *first* six observations in the `ess` dataset, you run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ess) # This shows you the first 6 observations\n\n```\n:::\n\n\n\n\n\n\nThe result should look like this:\n\n\n\n\n\n::: {.cell}\n\n```\n##   essround  idno cntry   gndr agea\n## 1        7 12414    NO   Male   22\n## 2        7  9438    NO Female   43\n## 3        7 19782    NO Female   58\n## 4        7 18876    NO Female   22\n## 5        7 20508    NO   Male   84\n## 6        7 19716    NO   Male   62\n##                                                                          edlvdno\n## 1    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 2    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 3                    Fullført 5-6 årig utdanning fra høgskole (master, hovedfag)\n## 4    Fullført 3-4 årig utdanning fra høgskole (Bachelor-, cand.mag., lærerhøgsko\n## 5    Universitet/høgskole, mindre enn 3 år, men minst 2 år (høgskolekandidat, 2-\n## 6 Fullført 5-6 årig utdanning fra universitet (master, hovedfag), lengre profesj\n##   mainact           mbtru        hinctnta                              tvtot\n## 1    <NA>              No H - 10th decile                     No time at all\n## 2    <NA>              No H - 10th decile  More than 1 hour, up to 1,5 hours\n## 3    <NA>  Yes, currently  K - 7th decile More than 2 hours, up to 2,5 hours\n## 4    <NA>              No  J - 1st decile More than 1,5 hours, up to 2 hours\n## 5 Retired Yes, previously            <NA>                     No time at all\n## 6    <NA>  Yes, currently H - 10th decile  More than 1 hour, up to 1,5 hours\n##   ppltrst vote             stflife                    gincdif\n## 1       7  Yes Extremely satisfied Neither agree nor disagree\n## 2       9  Yes                   8 Neither agree nor disagree\n## 3       9  Yes                   7             Agree strongly\n## 4       5   No                   7 Neither agree nor disagree\n## 5       7  Yes                   9 Neither agree nor disagree\n## 6       7  Yes                   8          Disagree strongly\n##                      freehms imwbcnt           happy    health ctzcntr brncntr\n## 1                      Agree       4               9      Good     Yes     Yes\n## 2             Agree strongly       4               9 Very good     Yes     Yes\n## 3             Agree strongly       5               8      Good     Yes     Yes\n## 4                      Agree       5 Extremely happy Very good     Yes     Yes\n## 5 Neither agree nor disagree       5               7 Very good     Yes     Yes\n## 6                      Agree       6               8      Fair     Yes     Yes\n##   height weight\n## 1    175     65\n## 2    175     71\n## 3    150     58\n## 4    173     63\n## 5    167     58\n## 6    174     58\n```\n:::\n\n\n\n\n\n\n\\newpage\n\n### Looking at specific variables\n\nIf the result above seems pretty cluttered and not very informative: Correct. But there is a solution. You can specify that only the first observations of a single variable are shown when you run `head()` or `tail()`. This can help when the dataset contains a larger number of variables and the output therefore becomes cluttered -- as was the case here. \n\nTake another quick look at the *Environment* window: You might have noticed that there are dollar symbols (`$`) before each of the variable names in the `ess` dataset. This is a hint to how you can select single variables from a dataset: With the dollar symbol. \n\nThe general syntax here is: `dataset$variable`. For example, to select the age-variable `agea` from the `ess` dataset, you would type: `ess$agea`\n\nYou can use this with the `head()` function to let `R` show you the first six observations of only the `agea`-variable:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ess$agea)\n## [1] 22 43 58 22 84 62\n```\n:::\n\n\n\n\n\n\nOf course, you can do this also with any of the other variables --- and this works also with many other functions such as `tail()`, `mean()`, or `summarize()`. More follows!\n\n\\newpage\n### Definining the number of observations (\"rows\")\n\nYou can also tell `R` to show you more or fewer observations when you use the `head()` function. For example, the code below will print out the first 10 observations of the `agea` variable:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ess$agea, n = 10)\n```\n:::\n\n\n\n\n\n\nYou can do the same with the `tail()` function.\n\n(A final note: As is often the case with `R`, there is more than one way to subset a dataset, and these allow you to select more than one variables at a time, or a specific set of observations. We will cover some of them in the next tutorial; for others see e.g.: <https://www.statmethods.net/management/subset.html>.)\n\n\n\\newpage\n\n## A quick summary of your data with `summary()`\n\nWith `View()`, `head()`, or `tail()`, you can look at the \"raw\" dataset. This can give you a first idea of what you are working with, but the problem is that you always only see a few data points at a time. Ideally, you would instead get a sense of how the entire dataset or single variables as a whole look like.\n\nThis is where you would use summary statistics like the mean (\"average\"), the median, or others (as explained in Kellstedt & Whitten).\n\nYou can get some important summary statistics with the `summary()` function.\n\nThis function is again easy to use: You just specify which object you want summarized within the parantheses. In this case, we use the function on the entire `ess` dataset:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ess)\n```\n:::\n\n\n\n\n\n\nIf you run this, you should get a list of summary statistics for all the variables in the `ess` dataset. For variables that contain numbers ('numeric' variables, or `num`), you get the minimum, the 1st quartile (a.k.a., the 25th percentile), the median, the mean ('average'), the 3rd quartile (or 75th percentile) and the maximum. Where variables have missing observations (`NA`'s), you get these, too. \n\nFor non-numeric variables (like `cntry`, for example) you get their 'length' (how many observations they contain) and their type or 'Class'.\n\nBut, as before, the output is again a bit cluttered (which is also why it is not shown here). It is therefore more useful to get summary statistics for a single variable by using the `$` symbol. For example:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ess$agea)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   16.00   33.50   46.00   47.91   62.00   90.00\n```\n:::\n\n\n\n\n\n\nHere, `Min.` means \"Minimum\", `1st Qu.` means \"First Quartile\", `Median` and `Mean` are obvious, `3rd Qu.` means \"Third Quartile\", and `Max.` means \"Maximum\". If you read Kellstedt/Whitten (2018, Chapter 6), then you should know how to interpret these different statistics.\n\n\\newpage \n\n<!-- ### Getting the number of rows or columns of your dataset -->\n\n<!-- Sometimes it can be useful to get the exact number of rows --- the unique observations --- or columns --- the variables --- your dataset contains. -->\n\n<!-- To get the number of rows, you use the `nrow()` function, for example: -->\n<!-- ```{r nrow, eval=T, echo=T, collapse=T} -->\n<!-- nrow(ess) -->\n<!-- ``` -->\n\n<!-- You see that you have 143 rows in your dataset --- i.e., observations for 143 individual respondents. -->\n\n<!-- \\newpage -->\n<!-- To get the number of columns (variables), you use the `ncol()` function. Alternatively, you can also use the `length()` function: -->\n<!-- ```{r ncol, echo=T, eval=T, collapse=T} -->\n<!-- ncol(ess) # Option 1 -->\n\n<!-- length(ess) # Option 2 -->\n<!-- ``` -->\n\n<!-- You see that the dataset contains 38 variables. -->\n\n## Specific summary statistics for numeric variables\n\nWhile `summary()` provides you a whole list of summary statistics, you often want a specific measure of central tendency or spread for a given variable.\n\nThese are easy to get in `R`; all you need are four functions, all with quite intuitive names:\n\n* `mean()` for the mean or \"average\";\n* `median()` for the median or \"50th percentile\";\n* `var()` for the variance;\n* `sd()` for the standard deviation;\n\nUsing these functions is straightforward --- for example, to get the mean of the age-variable (`agea`) in the `ess` dataset, you just run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(ess$agea)\n## [1] 47.90909\n```\n:::\n\n\n\n\n\n\nGetting the other summary statistics works the same way:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(ess$agea)\n## [1] 46\n\nsd(ess$agea)\n## [1] 18.5658\n\nvar(ess$agea)\n## [1] 344.6889\n```\n:::\n\n\n\n\n\n\n\\newpage\n### When you have missing observations (`NA`s)\n\nIt is often the case that your variables contain missing information --- indicated in `R` as `NA`. This happens for example when surveys include sensitive questions about people's incomes or their sexual orientation, which many respondents refuse to disclose The result is then an `NA` (\"not available\") for that particular respondent and variable. \n\n**Important**: The `mean()`, `median()`, `sd()`, and `var()` functions (and many others) will not give you a proper result *if there is even a single `NA` in your variable!* \n\nFortunately, there is an easy solution: All four functions have an option to remove `NA`s from the data before calculating the respective summary statistic; this option is called `na.rm` (\"`NA` remove\"). You just have to set this option to `TRUE` (switch it on) to take care of missings, for example:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(ess$agea, na.rm = TRUE)\n## [1] 47.90909\n```\n:::\n\n\n\n\n\n\n(Make sure you always add a comma between different parts or \"`arguments`\" of a function!)\n\n<!-- **Also important:** Calculating the mean, median, variance, or standard deviation obviously only makes sense for *single* numeric variables. Calculating the mean of an entire dataset or of a non-numeric variable will not work! -->\n\n<!-- If you want to try anyways, run: -->\n\n<!-- * `median(ess)` (what is the median of an entire dataset?) -->\n<!-- * `mean(ess$cntry)` (what is the mean of \"NO\"?) -->\n\n\\newpage\n\n## Working with categorical or ordinal variables\n\n### Introducing *factors*\n\nThe variable you have been working with so far, `agea`, is a typical numeric variable: It measures a respondent's age in years, and age is by nature a number. In this case, calculating statistics such as the mean makes sense.\n\nBut there are also other variables such as categorical or ordinal variables, where things are a bit different. Consider for example the variable that records the respondent's gender, `gndr`. Obviously, gender is by nature a categorical variable: It has two or more distinct categories (e.g., male, female, diverse), and these categories are *unordered*, meaning 'male' is obviously not a 'higher' or 'better' category than 'female' or 'diverse'. They are all simply different categories people can fall (or be put) into.\n\nOther times, you may be dealing with *ordinal* variables (e.g., a Likert-scale: \"disagree completely\", \"disagree\",\"neither\", \"agree\", \"agree completely\"). In these cases, there is an order --- but you cannot give a precise number for how much higher \"agree completely\" is compared to \"agree\". One is *more* than the other, but the difference between them is not clearly defined with a number.\n\nIn `R`, categorical or ordinal variables are usually stored as *factors*. *Factors* are a separate kind of variable or \"vector\" (next to numeric or `num` and character or `chr` variables). You can think of *factors* as \"numbers with labels\". \n\nFor example, take another look at the *Environment* tab (upper right of your screen) and look for the `gndr` variable. You can see directly that it is designated as a \"*Factor*\" with 2 levels --- but also that there is a row of numbers (`1,2,2,...`) behind the two levels \"Male\" and \"Female\".\n\nThis means:\n\n* Every male respondent gets the number `1`; that number then gets the label \"Male\" attached to it;\n* Every female respondent gets the number `2`; that number is then labeled \"Female\";\n\nThe same applies also to the (many) other factor variables in the `ess` dataset, or other datasets. Again: *Factors* are essentially just numbers with text labels.\n\n\\newpage\n\n### Identifying factor variables\n\nFirst, you should be able to *identify* that a given variable is indeed a *factor* variable. You can of course see this in the *Environment*, but this works only for a small dataset like the one you are using now. If you would work with the full ESS data, there would be many more variables and not all of them would be shown in the *Environment*.\n\nYou can use the `class()` function to let `R` tell you which type or *class* a specific variable is saved as. You use this like the other functions above (`dataset$variable`).\n\nLet's check if the gender-variable (`gndr`) is really saved as a factor, as it should be:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ess$gndr)\n## [1] \"factor\"\n```\n:::\n\n\n\n\n\n\nNow compare this to the age variable (`agea`):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ess$agea)\n## [1] \"numeric\"\n```\n:::\n\n\n\n\n\n\nThis is by nature a numeric variable, and it turns out that `R` has stored it properly.\n\n---\n\n**Important:** You cannot rely on that this always works! It is often the case that one or more variables in your dataset are *not* stored properly, which then usually causes warnings and errors. In this case, you first need to identify the issue --- and you now know how to do that --- and then you need to fix it. You will learn how to do this in the next tutorial.\n\n---\n\n\\newpage\n### Getting familiar with factor variables\n\nOnce you have identified a factor variable, you will usually want to learn more about it. But getting familiar with *factors* can be a bit tricky at first. Many summary statistics will not work here. For example, if you try to calculate the mean of a factor variable, `R` will refuse to do so:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(ess$gndr)\n## Warning in mean.default(ess$gndr): argument is not numeric or logical:\n## returning NA\n## [1] NA\n```\n:::\n\n\n\n\n\n\nThis does make sense: Many summary statistics are only appropriate if you are dealing with proper numbers, but here you have only categories. But this also means that you have to use different ways to learn how a factor variable in your dataset looks like.\n\n\\newpage\n### Getting the structure of a factor-type variable\nA first option is to let `R` print out the structure of the variable using `str()` (\"structure\"):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(ess$gndr)\n##  Factor w/ 2 levels \"Male\",\"Female\": 1 2 2 2 1 1 1 1 1 1 ...\n```\n:::\n\n\n\n\n\n\nThis tells you that `gndr` has two categories (\"Male\" & \"Female\") and that these are encoded with the numbers `1` and `2` in the dataset.\n\nWhat is not fully clear from this output, however, is which number really corresponds to which label --- are men now coded as `1` or as `2`? And this is also generally one of the things that can make working with factors daunting: it is a bit difficult to see 'under the hood' of a factor: how its text labels correspond to the numerical values underneath.\n\nBut you do have a tool to figure this out!\n\n\\newpage\n### How numerical values and text labels correspond\n\nThe `visfactor()` function in the `bst290` package allows you to see which number corresponds with which label in a given factor-type variable. \n\nFor example, to see the labels and numerical values of the `gndr` variable, you would run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisfactor(variable = \"gndr\", dataset = ess)\n##  values labels\n##       1   Male\n##       2 Female\n```\n:::\n\n\n\n\n\n\n\n\\newpage\n### Empty categories in factor-type variables\n\nAnother important thing to figure out is whether a particular factor variable in your dataset has empty categories. For example, you might be working with data from a survey in which respondents were asked whether they are working, in education, or unemployed --- and it just so happened that none of the respondents were unemployed at the time. In this case, \"unemployed\" would be an empty category in the data.\n\nThe easiest way to see if there are empty categories in a factor variable is to let `R` show you how many observations you have for each of the categories of the variable. To do so, you use the `table()` function.\n\nThis is how you would do this with the `gndr` variable:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ess$gndr)\n## \n##   Male Female \n##     75     68\n```\n:::\n\n\n\n\n\n\nYou see that there are 75 men and 68 women in the dataset --- and there are no empty categories.\n\nBut now compare this to the case of the `mainact` variable, which tells you about the respondent's main activity of the last seven days (whether they were working, unemployed, etc.):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ess$mainact)\n## \n##                                 Paid work \n##                                        15 \n##                                 Education \n##                                         7 \n##               Unemployed, looking for job \n##                                         0 \n##           Unemployed, not looking for job \n##                                         0 \n##              Permanently sick or disabled \n##                                         1 \n##                                   Retired \n##                                         7 \n##             Community or military service \n##                                         0 \n## Housework, looking after children, others \n##                                         3 \n##                                     Other \n##                                         0\n```\n:::\n\n\n\n\n\n\nIt turns out that there are indeed some empty categories: There are no unemployed respondents in the dataset, and none of them was doing military or community services.\n\n\\newpage\n\nAn alternative way to identify empty categories is to let `R` first print out which categories a factor variable can *theoretically* have and then compare that to what categories are *actually represented* in the dataset.\n\nTo see which categories your factor-variable can *theoretically* have, you use the `levels()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(ess$mainact)\n## [1] \"Paid work\"                                \n## [2] \"Education\"                                \n## [3] \"Unemployed, looking for job\"              \n## [4] \"Unemployed, not looking for job\"          \n## [5] \"Permanently sick or disabled\"             \n## [6] \"Retired\"                                  \n## [7] \"Community or military service\"            \n## [8] \"Housework, looking after children, others\"\n## [9] \"Other\"\n```\n:::\n\n\n\n\n\n\nYou see that the `mainact` variable has, in theory, nine categories in total, ranging from \"Paid work\" to \"Other\".\n\nNow, to see which of these categories are really present in the data, you can use the `unique()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(ess$mainact)\n## [1] <NA>                                     \n## [2] Retired                                  \n## [3] Paid work                                \n## [4] Education                                \n## [5] Housework, looking after children, others\n## [6] Permanently sick or disabled             \n## 9 Levels: Paid work Education ... Other\n```\n:::\n\n\n\n\n\n\nYou see that only five (plus the `NA`s) of the nine categories are listed --- and being unemployed is not one of them.\n\n\n\\newpage\n\n## Custom functions for summary tables\n\nSince it is a statistical programming language, `R` can be used to generate pretty much any type of summary table for any kind of situation you could think of. In addition, there are special packages for more advanced tables, for instance:\n\n* `gtsummary` (<https://www.danieldsjoberg.com/gtsummary/index.html>)\n* `xtable` (<https://cran.r-project.org/web/packages/xtable/vignettes/xtableGallery.pdf>)\n\n**But:** Learning how to use `R` functions to create tables takes a while, and using them can be tedious and prone to errors.\n\n### Functions from the `bst290` package\n\nTo make your life easier while you take this course, you can use special functions from the `bst290` package to easily generate the most important descriptive tables you will need:\n\n* `oppsumtabell`: To generate univariate summary tables; this is helpful for numeric variables.\n* `oppsum_grupp`: To get a table with summary statistics for one variable, over categories of another variable; this is helpful when you have a a numeric and a categorical variable.\n\n<!-- (In addition, the `bst290` package also includes the `krysstabell` function, which produces a two-variable cross table showing column percentages. You will learn about this in the later tutorial on tabular analysis and the chi-squared test.) -->\n\n\\newpage\n\n### Using `oppsumtabell`\n\n`oppsumtabell` produces a table with the most important summary statistics of one or more *numeric* variables.^[It does also work with factor variables, but you will get a warning message.] All you need to do is specify the dataset that contains your variable(s) and the specific variables you want summary statistics for.\n\nFor example, to get summary statistics for the `agea` variable you just run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noppsumtabell(dataset = ess, variables = \"agea\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Variable        agea  \n Observations    143.00\n Average          47.91\n 25th percentile  33.50\n Median           46.00\n 75th percentile  62.00\n Stand. Dev.      18.57\n Minimum          16.00\n Maximum          90.00\n Missing           0.00\n```\n\n\n:::\n:::\n\n\n\n\n\n\nTo do the same for more than one variable, you run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noppsumtabell(dataset = ess, variables = c(\"agea\",\"height\",\"weight\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Variable        agea   height weight\n Observations    143.00 142.00 138.00\n Average          47.91 173.76  78.63\n 25th percentile  33.50 167.25  65.00\n Median           46.00 174.00  75.00\n 75th percentile  62.00 180.00  88.75\n Stand. Dev.      18.57   8.78  19.20\n Minimum          16.00 147.00  50.00\n Maximum          90.00 196.00 182.00\n Missing           0.00   1.00   5.00\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis table shows summary statistics for age (`agea`) and the respondent's body height and weight.\n\nCan you interpret each of the statistics shown (again, see Kellstedt/Whitten 2018, Chapter 6).\n\n\\newpage\n### Norwegian language support\n\nYou can choose to have the table labelled in Norwegian (NB), if you want. All you have to do is to activate the `norsk`-option of the `oppsumtabell()` function and set it to `TRUE` (or `T`):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noppsumtabell(dataset = ess, \n             variables = c(\"agea\",\"height\",\"weight\"),\n             norsk = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Variabel      agea   height weight\n Observasjoner 143.00 142.00 138.00\n Gjennomsnitt   47.91 173.76  78.63\n 25. persentil  33.50 167.25  65.00\n Median         46.00 174.00  75.00\n 75. persentil  62.00 180.00  88.75\n Standardavvik  18.57   8.78  19.20\n Minimum        16.00 147.00  50.00\n Maksimum       90.00 196.00 182.00\n Manglende       0.00   1.00   5.00\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIf you take a look at the new version of the table, you will see that all English labels (\"standard deviation\", \"observations\") are replaced with their Norwegian equivalents (\"standardavvik\", \"observasjoner\").\n\n\\newpage\n\n### Exporting the table to Word\n\n`oppsumtabell` also has an *export*-functionality: You can switch on the export-function to get a result that you can directly copy and paste into a Word document and then transform into a nice, publication-quality table.\n\nFor example, to export the last table from above you simply add `export=TRUE` to your code:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noppsumtabell(dataset = ess, \n             variables = c(\"agea\",\"height\",\"weight\"),\n             norsk = TRUE,\n             export = TRUE)\n## Variabel,agea,height,weight\n## Observasjoner,143.00,142.00,138.00\n## Gjennomsnitt, 47.91,173.76, 78.63\n## 25. persentil, 33.50,167.25, 65.00\n## Median, 46.00,174.00, 75.00\n## 75. persentil, 62.00,180.00, 88.75\n## Standardavvik, 18.57,  8.78, 19.20\n## Minimum, 16.00,147.00, 50.00\n## Maksimum, 90.00,196.00,182.00\n## Manglende,  0.00,  1.00,  5.00\n```\n:::\n\n\n\n\n\n\nThis result arguably looks even less presentable than the other one, but: \n\n1. Copy the result as it is displayed in the *Console* (see also the screenshot below);\n2. Open a Word document;\n3. Paste the copied text into the document;\n4. Select the copied text and, in Word, open the 'Table' menu in the menu bar at the top; there, select 'Convert' and then `Convert text to table...'; \n5. In the menu, under \"Separate text at\" (\"Skill tekst ved\"), select \"Other\" (\"Annet\") and enter a comma into the field next to that option. The number of columns at the top should then also automatically adjust. Then click 'OK';\n6. Polish the table using the familiar options in Word;\n\n![Selecting & copying the results from the `R` console](opps_excopy.png)\n\n\\newpage\n\n### Using `oppsum_grupp`\n\nSometimes you want summary statistics for one variable, but separately for different categories of another variable. For example, assume you are interested in whether (and if yes, by how much) Norwegian men are on average taller than Norwegian women.\n\nThe `oppsum_grupp()` function produces a summary table that contains the same statistics as the ones you get from `oppsumtabell()`, but now broken down by categories of a second variable (which should ideally have only a few distinct categories!).\n\nTo get summary statistics for body height for men and women separately (i.e., over the categories of `gndr`) you run:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noppsum_grupp(dataset = ess, variable = \"height\", by.var = \"gndr\")\n##  gndr   Observations Average Stand. Dev. 25th percentile Median 75th percentile\n##  Female 67           167.87  6.66        164.00          168.00 173.00         \n##  Male   75           179.03  6.90        174.00          178.00 183.50         \n##  Minimum Maximum Missing\n##  147.00  180.00  1      \n##  165.00  196.00  0\n```\n:::\n\n\n\n\n\n\nYou can see that men are, on average, around 11 centimeters taller than women, and that the smallest woman is smaller than the smallest man (and the same for the tallest individuals in the sample).\n\nLike `oppsumtabell()`, `oppsum_grupp()` also has an export function (`export = TRUE`) and Norwegian language support (`norsk = TRUE`).\n\n\\newpage\n\n### Further help\n\nYou now know how to get quick summary statistics for a dataset or specific variables in a dataset. Of course, this tutorial covered only the essentials and there are many other ways to summarize your data. But these essentials should help you when you do your first steps as a political or social data analyst.\n\nAlso, if you want to get more detailed help on any of the functions covered in this tutorial, you can always resort to the functions' help files. For example, to get the help file for the `mean()` or `oppsumtabell()` functions, you just type the following into your *Console* tab and press Enter:\n\n* `?mean`\n* `?oppsumtabell`\n\nThe help files also contain examples that show you how to use the functions. Feel free to explore!\n\n\\newpage\n\n# Importing a real dataset into `R`\n\nNow you know how you can get familiar with a new dataset and do an *exploratory data analysis* (EDA) in `R`. The next step is get your hands on some real data. This is what you learn in this part of the tutorial and, if you like, the appendix.\n\n\n## The *European Social Survey*\nThe *European Social Survey (ESS)* is a large survey project that is conducted in countries all over Europe, including in Norway, and which has been running for several years now. In each round, between several hundred to more than 2000 randomly selected persons in each participating country give information (anonymously, of course) about their political opinions and behavior, their views about society, and their income, jobs, work situation, and families. Their responses are then made machine-readable and stored in dataset files, which anyone can use for free. \n\nYou can use the *ESS* to study, for example, why people vote or participate otherwise politically (e.g., by joining demonstrations or protests), which parties they voted for, how people think about social inequality, climate change, sexuality, the welfare state, and many other topics. Political scientists and sociologists often use data from the *ESS* in their research.^[Examples are: Rehm, P. (2009). Risks and redistribution: An individual-level analysis. *Comparative Political Studies*, 42(7):855–81; Giger, N. and Nelson, M. (2013). The welfare state or the economy? Preferences, constituencies, and strategies for retrenchment. *European Sociological Review*, 29(5):1083–94; Hooghe, M., Reeskens, T., Stolle, D., and Trappers, A. (2009). Ethnic diversity and generalized trust in Europe: A cross-national multilevel study. *Comparative Political Studies*, 42(2):198– 223; Gallego, A. (2007). Unequal political participation in Europe. *International Journal of Sociology*, 37(4):10–25; or Finseraas, H. (2008). Immigration and preferences for redistribution: An empirical analysis of European survey data. *Comparative European Politics*, 6(4):407–431.]\n\nSee <https://www.europeansocialsurvey.org/> for more details.\n\n\\newpage\n### Accessing & downloading *ESS* data\n\nYou can access all data from the *ESS* via the SIKT Data Portal: <https://ess.sikt.no/en/>.^[Alternatively, go to <https://www.europeansocialsurvey.org/> and click on \"Data\" in the menu at the top. On the following page, click on \"ESS Data Portal\" button.] \n\nOnce you have the page open:\n\n1. Scroll down and choose *ESS Round 7 -- 2014. Immigration, Social inequalities in health*. \n2. Choose **ESS7 - integrated file, edition 2.3**. You will then be forwarded to another page.\n3. Click on the red \"Download\" button that is shown on the upper right of your screen.\n4. You should then be forwarded a login page. Choose *\"Logg in med Feide\"* and use your UiS credentials to log in. (you may be able to jump over that step if you are already logged on to Feide, e.g., via *Canvas*).\n5. Once you are logged in, you will be directed back to the ESS Data Portal -- and you will now see three different download buttons (CSV, SPSS, Stata) on the upper right of your screen.\n6. Click on the **Stata** button.\n7. The data and a few other files will be downloaded as part of a compressed *ZIP* file. Unpack and open that file. The folder that opens will contain one file that ends with `.dta`.^[If you cannot see the file endings (\"extensions\"), you need to activate this in File Explorer/Finder. You should find instructions for your particular operating system if you google for example \"show file extensions in Windows\" or \"show file extensions in Mac\".]\n8. **The file ending with `.dta` is the dataset file. Copy/move this file into your project folder (in Windows File Explorer/Mac Finder).** Ideally, give the file a shorter name that is easier to type (e.g., `ess7.dta`).\n\nOnce you have your data file stored within your project folder, you can go back to *RStudio*.\n\nHere, you can check if everything worked by opening the *Files* tab in the lower-right corner. The dataset file should be listed here (next to all the other files in this folder).\n\n\\newpage\n## Importing data with `haven` and `labelled`\n\n`R` by itself can open *some* types of dataset files, but not all of them. Among the types of files that `R` itself cannot open are those that were created for other (commercial) data analysis programs:\n\n* `.sav`, the file format for `SPSS`\n* `.dta`, the file format for `Stata`\n* `.sas7bdat`, the file format for `SAS`\n\nThe ESS dataset file you just downloaded is a `.dta` file --- which means this dataset is saved in the Stata file format, and `R` by itself cannot open it.\n\nBut, luckily, there are a few packages that allow you to import these types of files into `R`. One of these is the `haven` package, and this is the one we will be using in this course.^[Other alternatives are `foreign`, `memisc`, or `readstata13`.] `haven` is a part of the `tidyverse` collection (see <https://haven.tidyverse.org/>), which means that you already installed it when you installed the `tidyverse` earlier. \n\n::: {.callout-note title=\"Just in case\"}\n\nIf `R` gives you an error message (e.g., \"Package `labelled` not found), you may have to quickly install the two packages with:\n\n - `install.packages(\"haven\")`\n - `install.packages(\"labelled\")`\n\n:::\n\n`haven` includes three functions to import the three main \"commercial\" dataset file formats:\n\n* `read_sav()` for `.sav` files\n* `read_dta()` for `.dta` files\n* `read_sas()` for `.sas7bdat` files\n\nTherefore, to import the *ESS* dataset that you just downloaded in `.dta` format, you would use `read_dta()`. \n\n*Important:* `haven` has a bit of a quirk in that it has its own way of organizing a dataset within `R` -- called the `labelled` format -- and that can take a bit to get used. To keep things simple, we convert the dataset to the \"normal\" format for `R`. To do that, we use the `labelled::unlabelled()` function.\n\n\\newpage\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\nPutting all this together: To import the dataset file, you would use:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ness7 <- labelled::unlabelled(haven::read_dta(\"ess7.dta\"))\n```\n:::\n\n\n\n\n\n\nHere, `haven::read_dta()` uses the `read_dta()` function from `haven` to import the dataset -- and then we directly convert it with `labelled::unlabelled()` and save the result as `ess7`.\n\n\n\\newpage\n### Generating a data dictionary\n\nIf you take a quick look at the `ess7` data object in the *Environment*, you notice that it contains 601 variables. Such a large number of variables is typical for a real-life survey dataset, but it also means that it can be difficult to get an overview over all the variables and their values.\n\nFortunately, there is a function to easily create a *data dictionary* or *codebook* that is included in `labelled`: the `generate_dictionary()` function.\n\nUsing this function is easy --- you just need to make sure to save the function's output in a new object like `dict_ess7`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndict_ess7 <- labelled::generate_dictionary(ess7)\n```\n:::\n\n\n\n\n\n\nYou will now see a new object in your *Environment* called `dict_ess7`.^[Technically, the `dict_ess7` dictionary is itself a dataset-type object, which means you can also do some data exploration with it. This goes beyond the scope of this tutorial, but feel free to play around with it.] If you now run `View(dict_ess7)`, you get a neat table that shows you the name, label, and value labels of all the variables in your dataset.\n\nNow you know how you can get survey data for Norway and many other countries on a wide variety of topics from a highly trusted source! Take also a few minutes to explore the ESS website and their Data Portal to see which topics they cover and which variables they have in each survey round!\n\n<!-- **Next step:** You explore the full ESS dataset in the Exercises. -->\n\n\n\n\n<!-- See also the official package \"vignette\" (https://cran.r-project.org/web/packages/essurvey/vignettes/intro_ess.html) for more on the `essurvey` package. -->\n\n\\newpage\n\n\n\n\n<!-- In this first exercise, you repeat the main points from the previous tutorial on data loading. -->\n\n<!-- 1. Load the `haven` package using `library()`; -->\n<!-- 2. Go to https://www.cpds-data.org/index.php/data and copy the link to the Stata version of the CPDS dataset; -->\n<!-- 3. Use the `read_dta()` function from the `haven` package to download the CPDS dataset and save it as `cpds` in `R`; -->\n\n<!-- (Obviously, feel free to take a peek at the previous tutorial. You should find all the information you need there.) -->\n\n<!-- ## Exercise 2 -->\n\n<!-- Now that you have loaded the CPDS dataset, do some exploring: -->\n\n<!-- 1. Use the `head()` function to look at the first few observations in the dataset. -->\n<!-- 2. How many observations and variables does the CPDS dataset contain? -->\n<!-- 3. Get summary statistics for the entire dataset using `summary()`. Do you find the result helpful? -->\n<!-- 4. Get summary statistics for individual variables: -->\n<!--     + Use `summary()` to get summary statistics for the share of left parties in government (`gov_left1`); be careful not to forget to use the dollar sign, and take a look at the dataset codebook (available from https://www.cpds-data.org/index.php/data to see what exactly the variable measures); -->\n<!--     + Can you interpret the different statistics you get? -->\n<!--     + What happens if you try the same with the `country` variable? -->\n<!-- 5. Can you get the list of countries included in the dataset using the `unique()` function? Can you do the same for the years covered? -->\n<!-- 6. Take a look at the raw dataset using `View()`. Can you see how the dataset is structured? -->\n\n<!-- ## Exercise 3 -->\n\n<!-- You now have a rough sense of what the dataset looks like --- which countries and time periods are covered --- and you saw summary statistics for a single variable, `gov_left1`. -->\n\n<!-- In this exercise, you calculate single summary statistics for selected variables (always remember to use the dollar sign when referring to specific variables from the CPDS dataset in your function): -->\n\n<!-- 1. Calculate the mean ('average') and median of `womenpar`, the share of women in parliament in each country and year. Are you happy with the results? What happens if you remove missing observations, `NA`s (hint: `rm.na`)? -->\n<!-- 2. Now calculate the variance and standard deviation of `womenpar`. -->\n<!-- 3. Interpret all four statistics (refer again to the codebook to see how `womenpar` is measured). What do you learn about female political representation in the economically advanced democracies? -->\n\n<!-- ## Exercise 4 -->\n\n<!-- In this final exercise, you dive a bit deeper into the issue of female representation using the custom `oppsumtabell()` and `oppsum_grupp()` functions: -->\n\n<!-- 1. Let `R` give you summary statistics for the `womenpar` variable alone using the `oppsumtabell()` function. Interpret each of the statistics. -->\n<!-- 2. Go to the CPDS codebook and look for the variable indicating membership in the European Union (`eu`). Read the brief description, then use the `unique()` function to let `R` give you its unique categories. What do `1` and `0` mean here? -->\n<!-- 3. Use `oppsum_grupp()` to calculate summary statistics of `womenpar` for countries that are EU members and for those who are not. What is your impression? Do EU countries have more or fewer women in parliament than non-EU countries? -->\n<!-- 4. Now use `oppsum_grupp()` to get statistics of `womenpar` across countries (`R` will ask you if you are sure that you want to proceed; say yes). Can you find Norway? How does Norway compare to other countries, for example to the United States, Sweden, or France? -->\n\n# De-bugging exercises\n\nThe final part of this tutorial (and the next three) are interactive de-bugging challenges. You will get a set of code 'chunks' that have some problem in them --- and your job is to fix these problems.\n\n1. In `RStudio`, navigate to the *Tutorial* tab (upper-right corner of your screen, where the *Environment* tab is). \n2. Start the interactive exercise for this tutorial (*\"De-bugging exercises: Getting to know your data\"*), pop out the window (the little button between the house and red stop button) and maximize, and follow the instructions there.^[If there are no tutorials called *\"De-bugging exercises:...\"* shown, just restart `R` by clicking on \"Session\" in the menu at the top of your screen, and there on \"Restart R\". You may also have to install the `learnr` package --- in that case, `RStudio` will let you know and you only have to do this once.]\n\n<!-- \\newpage -->\n<!-- # (Voluntary!) Importing other types of datasets -->\n\n<!-- Now you know how to import data from the European Social Survey into `R` and do an exploratory data analysis. But, obviously, the ESS is only one of many, many datasets that you can use.^[See e.g., https://github.com/erikgahner/PolData for an overview over datasets for political and social research.] And not all datasets will be available in `SPSS`- or `Stata`-format. Some will only be available Excel (`.xls` or `.xlsx`) files. -->\n\n<!-- In this voluntary extra part of the tutorial, you will learn how you can import datasets that are stored in this format, and also how you can download and import files directly from a website. -->\n\n<!-- \\newpage -->\n<!-- ## The *Comparative Political Data Set* -->\n\n<!-- A widely used dataset in political science and sociology is the *Comparative Political Data Set* or CPDS. This dataset is maintained by a team at the University of Berne in Switzerland (see https://cpds-data.org/).   -->\n\n<!-- As the name suggests, the CPDS is a *comparative* or *cross-country comparative* dataset: Where the ESS includes data on *individual citizens*, the CPDS includes data on *countries*. With this dataset, you can for example compare countries' political institutions, their party systems, their welfare states and labor market policies, and economic performance. In this dataset, the units of observation are countries --- or, more accurately, country-years. -->\n\n<!-- \\newpage -->\n<!-- ## Taking a look at the CPDS in Excel -->\n\n<!-- To get famililar with the CPDS, you will first take a look at it in a format that you are probably used to: Microsoft Excel. If you go to https://www.cpds-data.org/index.php/data, you see listed under **Data** two links, one to a Stata file and one to an Excel file.  -->\n\n<!-- <!-- Many people who share their datasets online do indeed store these as Excel files. You can recognize that something is an Excel file if its name as shown in the Windows File Explorer/Mac Finder ends with `.xslx` or `.xls`.^[Does your computer not show you any file extensions? You can adjust this easily. Windows users: Open the File Explorer (\"*Filutforsker*\"); open the \"View\" tab (\"*Visning*\"); check the box called \"File name extensions\" (\"*Filtyper*\"). Mac users: Go to Finder and open the Preferences menu; open the *Advanced* tab; check the box that says \"*Show all filename extensions*\".] --> -->\n\n<!-- <!-- An example is the *Comparative Political Data Set*.  --> -->\n\n<!-- Click on the **Excel** link to download the dataset to your computer. Then open the file in Excel to take a look. You should see something similar to the screenshot below: -->\n\n<!-- ![The CPDS dataset in Excel](cpds_xl.png) -->\n\n<!-- Just lots and lots of boring data. You also see different country names and years --- every single row represents a single country in a single year. Therefore, the unit of observation is country-years.  -->\n\n<!-- \\newpage -->\n<!-- ## Importing the CPDS as a Stata (`.dta`) file -->\n\n<!-- If you now go back to the website of the CPDS dataset (https://www.cpds-data.org/index.php/data), you see that there is also a link to download the dataset as a Stata (`.dta`) file. This is the file that you will now import into `R`. -->\n\n<!-- ### Using `haven` to import the CPDS dataset -->\n\n<!-- Now to the interesting part: Importing the dataset into `R`. -->\n\n<!-- Theoretically, you could now download the `.dta` file to your computer, store it into your working directory, and then import it from there. -->\n\n<!-- But there is also an easier way: You can directly download it using the link on the CPDS website! To download and import the dataset via the link, you need to go back to the CPDS website and copy the link to the `Stata` file (right-click on the link in your browser; \"Copy link\"). -->\n\n<!-- Then you use that link in the `read_dta()` function like this: -->\n<!-- ```{r readdta, eval=F, echo=T} -->\n<!-- cpds <- read_dta(\"https://www.cpds-data.org/images/Update2021/CPDS_1960-2019_Update_2021.dta\") -->\n\n<!-- ``` -->\n\n<!-- This code does the following: -->\n\n<!-- 1. `read_dta()` uses the link to download and import the CPDS data file... -->\n<!-- 2. ...and the result --- the dataset --- gets saved into the `cpds` object with the assignment operator -->\n\n<!-- If all worked, then you should see the `cpds` object appear in your working environment (in the upper-right corner of your screen). -->\n<!-- \\newpage -->\n\n<!-- ### What you see -->\n<!-- Just from the information you should see now, you can tell that the `cpds` dataset includes 1759 observations and 323 variables (at the time I'm writing this at least). -->\n\n<!-- As before, you can get more detailed information about the variables included in the dataset if you click on the little blue circle with the white \"play\" symbol inside (just to the left of `cpds` in the environment). Once you click on this, a list of **variable names** unfolds, for example `year`, `country`, or `iso`. -->\n\n<!-- ![The CPDS dataset in `R`](cpds-dta.png) -->\n\n<!-- You see that there are different variables (`year`,...) and some extra lines reading `attr()`, containing the variables' labels. -->\n\n<!-- You can again look at the data directly using `View(cpds)` --- it should look basically as it did in Excel, only that you get more informative labels for your variables. -->\n\n\n<!-- \\newpage -->\n<!-- ## Importing Excel (`.xls`/`.xlsx`) files -->\n\n<!-- Excel is widely used and there is therefore a way to import Excel dataset files into `R`. To do this, you need to install yet another package: `readxl` (\"read Excel\" --- the last symbol is a small L, not a 1). -->\n\n<!-- You already know how to install and load packages, so I trust that you can install the `readxl` package by yourself. -->\n\n<!-- \\newpage -->\n<!-- ### Importing the CPDS dataset as an Excel file -->\n\n<!-- Earlier you downloaded and opened the CPDS dataset as an Excel file --- now you will import that file into `R`. -->\n\n<!-- **Important:** Unlike `haven`, `readxl` cannot download files directly from the internet. This means that if you want to import an Excel file with `readxl`, you first have to download it to your computer and then open the file from there. -->\n\n<!-- The easiest way to do this is to save the CPDS Excel file into your `R` project folder (the one you created in the first tutorial). -->\n\n<!-- Once you have the CPDS Excel-file stored in your project folder, you can import it with `readxl`. -->\n\n<!-- Specifically, you use the `read_excel()` function, which can import both the older `.xls` and the newer `.xlsx` formats. You use `read_excel()` similarly to how you use `read_dta()` from `haven`.  -->\n\n<!-- For example, with the CPDS data file this would look like this: -->\n<!-- ```{r readxl, eval=F, echo=T} -->\n<!-- cpds <- read_excel(\"CPDS_1960-2019_Update_2021.xlsx\") -->\n<!-- ``` -->\n\n<!-- Once you run the function, the dataset should appear in your *Environment* tab. Most likely, it will look a bit different compared to when the dataset was imported with `haven`, but the dataset itself will be the same. -->\n\n<!-- There are many different ways to read data from Excel files --- you can read specific *sheets* from a larger file, or also only parts of a sheet. See the `readxl` documentation for details: https://readxl.tidyverse.org/ -->\n\n<!-- ### De-bugging exercises -->\n\n<!-- There are also some de-bugging exercises specifically for this last voluntary part of the data-import tutorial. You can access these via *Tutorials* (\"Getting your data into R\"). -->\n",
    "supporting": [
      "tutorial_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}