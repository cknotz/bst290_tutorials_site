---
title: "Visualizing overlapping points with geom_count()"
author: 
  - name: Rosa Ottestad
    url:  "https://www.linkedin.com/in/rosa-ottestad-718320325/"
  - name: Norman Sunde
    url: "https://www.linkedin.com/in/norman-sunde/"
toc: true
number-sections: true
format:
  html: default
  pdf: default
lightbox: true
lang: en
editor_options: 
  chunk_output_type: console
---

## Overlapping points & `geom_point()`

The default way to visualize the relationship between two numeric variables is a scatterplot, which can be drawn with the `geom_point()` function in `ggplot2`. Often, however, we work with variables that are only *quasi-numeric*, meaning they are strictly speaking not numeric but ordinal but they have enough categories to allows us to treat as if they were numeric. Typical examples are measurements of political ideology on 0-10 left-right scales in public opinion surveys or measurements of trust in political actors in the *European Social Survey* (ESS), which are also on 0-10 scales. 

The problem here is that observations can only have a limited number of values: The numbers from 0 to 10, but nothing in between. When plotting these types of variables with `geom_point()`, this leads to *overplotting*, meaning that many different observations that have the exact same values are "stacked" on top of each other. In this case, patterns or relationships between the variables are difficult to see.

The `geom_count()` function in `ggplot2` addresses this by adding up all duplicate values and then visualizing the number ("count") of all observations with same values in the form of differently sized circles. A LOESS curve can then be added to show the overall pattern without assuming a linear relationship. This technique is especially useful for quasi-continuous variables, such as political trust,
happiness, or attitudes toward immigrants in the ESS.

We show how to do this with example data from the ESS as contained in the `bst290` package.

## Example analysis
### Setup & data management
The following two packages are required for this:
```{r}
library(tidyverse)
library(bst290)
```

Then we load the dataset:
```{r}
ess <- bst290::ess
```

We focus on the following two variables from the dataset:

 - `ppltrst`: Most people can be trusted (0-10)
 - `imwbcnt`: Immigrants make a country worse or better place to live (0-10)

Before plotting, we convert these variables to the numeric format:
```{r}
ess$ppltrst <- (as.numeric(ess$ppltrst)-1)
ess$imwbcnt <- (as.numeric(ess$imwbcnt)-1)
```

### Preview: The final plot

The code to plot the relationship between these variables (and the result) looks as follows:
```{r}
ggplot(data = ess,
aes(x = ppltrst,y = imwbcnt))+
geom_count()+
geom_smooth(method = loess)+
labs(x = "Most people can be trusted (1-10)",
y = "Immigrants make a country worse or better to live(1-10)",
title = "Trust in people and attitude towards immigration")+
theme_bw()
```

### The process, step-by-step

#### Starting with ggplot()
The `ggplot()` function is the foundation of any plot in `ggplot2`:
```{r}
ggplot()
```

#### Define the dataset

Specify the dataset you want to use. In this case we are using the ESS practice dataset:
```{r}
ggplot(data = ess)
```

#### Set the aesthetics (axes and variables)

Define which variables youâ€™d like to use and on which axes:
````{r}
ggplot(data = ess,
  aes(x = ppltrst, y = imwbcnt))
````

This places `ppltrst` on the x-axis and `imwbcnt` on the y-axis. Your independent variable should always be on the x-axis (bottom) and your dependent variable should always be on the y-axis (the left side).

#### Add graph contents with `geom_count()`

The next step here is to add `geom_count()` to plot the overlapping points:
```{r}
ggplot(data = ess,
  aes(x = ppltrst,y = imwbcnt))+
  geom_count()
```

#### Add a smoothed trend line (LOESS)

LOESS adds a smooth curve that highlights the average pattern, along with a 95% confidence band:
```{r}
ggplot(data = ess,
  aes(x = ppltrst,y = imwbcnt))+
  geom_count()+
  geom_smooth(method = loess)
```

#### dd informative labels
To finish your graph, add the labels to your axes and a title as you normally would:
```{r}
ggplot(data = ess,
  aes(x = ppltrst,y = imwbcnt))+
  geom_count()+
  geom_smooth(method = loess)+
  labs(x = "Most people can be trusted (1-10)",
  y = "Immigrants make a country worse or better to live(1-10)",
  title = "Trust in people and attitude towards immigration")

```

#### Add theme

Want to score some extra points with your professor? Add a more classic theme (look) to your graph:
```{r}
ggplot(data = ess,
  aes(x = ppltrst,y = imwbcnt)) +
  geom_count()+
  geom_smooth(method = loess) +
  labs(x = "Most people can be trusted (1-10)",
  y = "Immigrants make a country worse or better to live(1-10)",
  Title = "Trust in people and attitude towards immigration") +
  theme_bw()

```

Or:
```{r}
ggplot(data = ess,
  aes(x = ppltrst,y = imwbcnt))+
  geom_count()+
  geom_smooth(method = loess )+
  labs(x = "Most people can be trusted (1-10)",
  y = "Immigrants make a country worse or better to live(1-10)",
  title = "Trust in people and attitude towards immigration")+
  theme_classic()
```



